[{"path":"https://iferres.github.io/pagoo/articles/Input.html","id":"input-from-scratch","dir":"Articles","previous_headings":"","what":"Input From Scratch","title":"Input","text":"order generate pagoo object, mandatory data structure data.frame contain 3 basic columns. Let’s illustrate toy dataset. First load pagoo: file need now case_df.tsv. Lets load see ’s structure: data.frame 4 columns. first one name gene, second one organism gene belongs, third one cluster gene assigned pangenome reconstruction, last one annotation metadata gene. 4 columns, former 3 required, pagoo look columns named “gene”, “org”, “cluster”. columns optional, can add many want (none) add metadata gene. data (even ignoring fourth column, metadata), can start working pagoo: let’s continue adding .","code":"library(pagoo) # Load package tgz <- system.file('extdata', 'toy_data.tar.gz', package = 'pagoo') untar(tarfile = tgz, exdir = tempdir()) # Decompress example dataset files <- list.files(path = tempdir(), full.names = TRUE, pattern = 'tsv$|fasta$') # List files files ## [1] \"/tmp/RtmpdkgAUX/case_clusters_meta.tsv\" ## [2] \"/tmp/RtmpdkgAUX/case_df.tsv\"            ## [3] \"/tmp/RtmpdkgAUX/case_orgs_meta.tsv\"     ## [4] \"/tmp/RtmpdkgAUX/organismA.fasta\"        ## [5] \"/tmp/RtmpdkgAUX/organismB.fasta\"        ## [6] \"/tmp/RtmpdkgAUX/organismC.fasta\"        ## [7] \"/tmp/RtmpdkgAUX/organismD.fasta\"        ## [8] \"/tmp/RtmpdkgAUX/organismE.fasta\" data_file <- grep(\"case_df.tsv\", files, value = TRUE) data <- read.table(data_file, header = TRUE, sep = '\\t', quote = '') head(data) ##      gene       org cluster                             annot ## 1 gene081 organismA   OG001  Thioesterase superfamily protein ## 2 gene122 organismB   OG001          Thioesterase superfamily ## 3 gene299 organismC   OG001  Thioesterase superfamily protein ## 4 gene186 organismD   OG001  Thioesterase superfamily protein ## 5 gene076 organismE   OG001          Thioesterase superfamily ## 6 gene352 organismA   OG002 Inherit from proNOG: Thioesterase pg <- pagoo(data = data)"},{"path":"https://iferres.github.io/pagoo/articles/Input.html","id":"including-organism-metadata","dir":"Articles","previous_headings":"Input From Scratch","what":"Including organism metadata","title":"Input","text":"next 2 .tsv files contains metadata cluster organism, respectively, optional arguments. data.frame column named org mandatory case provide argument. columns metadata associated organism. Beware organisms provided table (orgs_meta$org) must coincide names provided data$org field, order correctly map variables.","code":"# Organism metadata orgs_file <- grep(\"case_orgs_meta.tsv\", files, value = TRUE) orgs_meta <- read.table(orgs_file, header = TRUE, sep = '\\t', quote = '') head(orgs_meta) ##         org sero  country ## 1 organismA    a Westeros ## 2 organismB    b Westeros ## 3 organismC    c Westeros ## 4 organismD    a    Essos ## 5 organismE    b    Essos"},{"path":"https://iferres.github.io/pagoo/articles/Input.html","id":"including-cluster-metadata","dir":"Articles","previous_headings":"Input From Scratch","what":"Including cluster metadata","title":"Input","text":"Last file contains metadata associated cluster orthologous: , column clust_meta$cluster must contain elements data$cluster column able map one . data pagoo object look much complete. can still add sequence information pangenome, makes much useful interesting work .","code":"# Cluster metadata clust_file <- grep(\"case_clusters_meta.tsv\", files, value = TRUE) clust_meta <- read.table(clust_file, header = TRUE, sep = '\\t', quote = '') head(clust_meta) ##   cluster   kegg  cog ## 1   OG001   <NA>    S ## 2   OG002   <NA>    S ## 3   OG003   <NA> <NA> ## 4   OG004   <NA>    D ## 5   OG005 K01990    V ## 6   OG006   <NA>    V"},{"path":"https://iferres.github.io/pagoo/articles/Input.html","id":"including-sequences","dir":"Articles","previous_headings":"Input From Scratch","what":"Including sequences","title":"Input","text":"made dataset 5 organisms, decide add sequences pangenome must provide 5 organisms. type data needed DNA multifasta file organism, sequence gene whose name can mapped data$gene column. must first load sequences list, name list element organism provided data$org (well org_meta$org). list look something like: gene1 gene2 … geneN gene1 gene2 … geneM gene1 gene2 … geneP … case example working : list DNAStringSet (Biostrings package). Now can load quite complete pagoo object (still add metadata genes, clusters, organisms):","code":"# Sequences fasta_files <- grep(\"[.]fasta\", files, value = TRUE) # List fasta files names(fasta_files) <- sub('[.]fasta', '', basename(fasta_files)) # Name them  # Read fasta files with Biostrings: library(Biostrings) sq <- lapply(fasta_files, readDNAStringSet) class(sq) # Is list? ## [1] \"list\" length(sq) # One list element per organism ## [1] 5 names(sq) # Names are the same as in data$org ## [1] \"organismA\" \"organismB\" \"organismC\" \"organismD\" \"organismE\" class(sq[[1]]) # Class of each element of the list ## [1] \"DNAStringSet\" ## attr(,\"package\") ## [1] \"Biostrings\" p <- pagoo(data = data, # Required data            org_meta = orgs_meta, # Organism's metadata            cluster_meta = clust_meta, # Cluster's metadata            sequences = sq) # Sequences"},{"path":"https://iferres.github.io/pagoo/articles/Input.html","id":"input-from-pangenome-reconstruction-software","dir":"Articles","previous_headings":"","what":"Input From Pangenome Reconstruction Software","title":"Input","text":"stuff preparing data loading classes seems difficult time-consuming, real life working datasets rarely needed. explaining provide full details software works, package also provides functions automatically read-output files pangenome reconstruction software pagoo, avoiding formatting manipulation data. Currently pagoo supports input roary (Page et al., 2015), standard cited software pangenome reconstruction, panaroo (Tonkin-Hill et al., 2020). worth noticing roary become used software field, tools PEPPAN, PRIATE panaroo include scripts convert output roary’s format. work roary’s output, please refer ?roary_2_pagoo documentation. Although panaroo also includes tool , provide function load native output format, see ?panaroo_2_pagoo. functions need .gff files used input roary panaroo, gene_presence_absence.csv file. Also, created pangenome reconstruction software called pewit (Ferrés et al., still unpublished), automatically generates pagoo-like object perform downstream analyses. object contain methods fields pagoo provides, plus set methods fields exclusive software. good pangenome reconstruction software already exists like PanX (Ding et al., 2018), micropan (Snipen & Liland, 2015), GET_HOMOLOGUES (Contreras-Moreira & Vinuesa, 2013), among others. plan provide support future.","code":""},{"path":"https://iferres.github.io/pagoo/articles/Input.html","id":"adding-metadata-after-object-creation","dir":"Articles","previous_headings":"","what":"Adding Metadata After Object Creation","title":"Input","text":"object creation, may want add new metadata given new information result posterior analyses. pagoo objects include function add columns metadata gene, cluster, organism. illustrate , add new column $organisms field named host add made information host genome isolated . order allow pagoo correct data mapping, values first column metadata table available p$organisms$org, column header must also named org. said, can add gene cluster metadata following idea.","code":"host_df <- data.frame(org = p$organisms$org, host = c(\"Cow\", \"Dog\", \"Cat\", \"Cow\", \"Sheep\")) p$add_metadata(map = \"org\", host_df) p$organisms ## DataFrame with 5 rows and 4 columns ##         org        sero     country        host ##    <factor> <character> <character> <character> ## 1 organismA           a    Westeros         Cow ## 2 organismB           b    Westeros         Dog ## 3 organismC           c    Westeros         Cat ## 4 organismD           a       Essos         Cow ## 5 organismE           b       Essos       Sheep"},{"path":"https://iferres.github.io/pagoo/articles/Input.html","id":"saving-and-loading-pagoo-objects","dir":"Articles","previous_headings":"","what":"Saving and Loading pagoo objects","title":"Input","text":"loaded, two methods saving reloading new R session. first one saving flat (text) files: creates directory 3 text files. advantage approach can analyze outside R, disadvantage reproducibility point view reading text less stable since class number precision can lost, also can’t save state object given time. available organisms/genes/clusters saved, reload class using tsv files, previously dropped organisms/gene/cluster won’t available . (information dropping/recovering organisms, see “Subset” tutorial). want save object continue working R session, recommend save R objects RDS methods provided: method stable (compatible pagoo versions), secure (uses metadata classes, precision isn’t lost), convenient (exact state object saved restored, keeping dropped organisms/genes/clusters hidden, available recovered, object state configuration, e.g. core_level, also saved).","code":"tmp <- paste(tempdir(), \"pangenome\", sep = \"/\") p$write_pangenome(dir = tmp) list.files(tmp, full.names = TRUE) ## [1] \"/tmp/RtmpdkgAUX/pangenome/clusters.tsv\"  ## [2] \"/tmp/RtmpdkgAUX/pangenome/data.tsv\"      ## [3] \"/tmp/RtmpdkgAUX/pangenome/organisms.tsv\" rds <- paste(tempdir(), \"pangenome.RDS\", sep = \"/\") p$save_pangenomeRDS(file = rds) p2 <- load_pangenomeRDS(rds)"},{"path":"https://iferres.github.io/pagoo/articles/Methods_Plots.html","id":"statistical-methods","dir":"Articles","previous_headings":"","what":"Statistical methods","title":"Methods and Plots","text":"tutorial , , methods covered. get idea, just browse documentation see available methods arguments take.","code":""},{"path":"https://iferres.github.io/pagoo/articles/Methods_Plots.html","id":"gene-abundance-distance","dir":"Articles","previous_headings":"Statistical methods","what":"Gene Abundance Distance","title":"Methods and Plots","text":"Pairwise distances gene abundance can retrieved using $dist() method. default, Bray-Curtis distance computed. just wrapper vegdist() vegan package. distances available include, instance, Jaccard distance (see documentation). method require presence/absence data, abundance, use binary = TRUE argument set.","code":"p$dist() ##             16244_6_6 16244_6_18 17059_2_16 17059_2_23 17059_2_27 17150_1_73 ## 16244_6_18 0.06594656                                                        ## 17059_2_16 0.12122816 0.12500000                                             ## 17059_2_23 0.09622745 0.09632517 0.07632399                                  ## 17059_2_27 0.09245937 0.11310008 0.10311629 0.08230990                       ## 17150_1_73 0.08203991 0.09034444 0.13624408 0.12275937 0.12999735            ## 17059_2_42 0.08920705 0.09927089 0.14532148 0.12682137 0.13706919 0.09518600 p$dist(method = \"jaccard\", binary = TRUE)"},{"path":"https://iferres.github.io/pagoo/articles/Methods_Plots.html","id":"principal-component-analysis","dir":"Articles","previous_headings":"Statistical methods","what":"Principal Component Analysis","title":"Methods and Plots","text":"method compute prcomp (stats package) panmatrix provided. can use generic functions analyze results.","code":"pca <- p$pan_pca() summary(pca) ## Importance of components: ##                           PC1    PC2    PC3    PC4    PC5     PC6      PC7 ## Standard deviation     8.1626 6.1103 5.5458 5.2924 4.6981 4.29398 6.73e-15 ## Proportion of Variance 0.3278 0.1837 0.1513 0.1378 0.1086 0.09072 0.00e+00 ## Cumulative Proportion  0.3278 0.5115 0.6629 0.8007 0.9093 1.00000 1.00e+00"},{"path":"https://iferres.github.io/pagoo/articles/Methods_Plots.html","id":"visualization-methods","dir":"Articles","previous_headings":"","what":"Visualization methods","title":"Methods and Plots","text":"pagoo uses ggplot2 package produce customizable visualizations. necessary load ggplot2 plot pangenome data, better since can fully customize . Also using patchwork arrange plots cases show, side side, default plot customized one.","code":"library(ggplot2) library(patchwork) # To arrange plots"},{"path":"https://iferres.github.io/pagoo/articles/Methods_Plots.html","id":"summary-pie-chart","dir":"Articles","previous_headings":"Visualization methods","what":"Summary Pie Chart","title":"Methods and Plots","text":"basic plot pie chart show core, shell, cloud genome proportions.","code":"# Basic pie1 <- p$gg_pie() + ggtitle(\"Default\")  # Customize with ggplot2 pie2 <- pie1 +    ggtitle(\"Customized\") +    theme_bw(base_size = 15) +    scale_fill_brewer(palette = \"Blues\")  # Arrange (patchwork) and plot pie1 + pie2"},{"path":"https://iferres.github.io/pagoo/articles/Methods_Plots.html","id":"gene-frequency-barplot","dir":"Articles","previous_headings":"Visualization methods","what":"Gene Frequency BarPlot","title":"Methods and Plots","text":"Frequency barplots one basic plots pangenomics. show many clusters 1 genome, many 2 genomes, .., showing many clusters genomes (.e. part coregenome).","code":"p$gg_barplot()"},{"path":"https://iferres.github.io/pagoo/articles/Methods_Plots.html","id":"gene-presenceabsence-binmap","dir":"Articles","previous_headings":"Visualization methods","what":"Gene Presence/Absence BinMap","title":"Methods and Plots","text":"binary map show gene presence/absence patterns per genome. column cluster orthologous genes, row organism. columns (clusters) sorted column sums, core genes appear left, cloud genes right, shell genes middle. plot useful, example, identify strains abnormal accessory gene patterns can represent true biological signatures like presence extrachromosomal elements artifacts product contamination sequencing.","code":"p$gg_binmap()"},{"path":"https://iferres.github.io/pagoo/articles/Methods_Plots.html","id":"rarefaction-curves","dir":"Articles","previous_headings":"Visualization methods","what":"Rarefaction Curves","title":"Methods and Plots","text":"Pangenome curves typically illustrate number gene clusters subsequently discovered genomes added dataset. pangenome open, accessory genes discovered new genomes added analysis size core genome tend decrease. pagoo applies Power-law distribution fit pangenome size Exponential decay function fit core genome size. Rarefaction curves computed first performing permutations $rarefact(), fitting Power Law pangenome counts, Exponential Decay Law coregenome counts. latter two operations done using $pg_power_law_fit() $cg_exp_decay_fit() methods, respectively (see documentation details). $gg_curves() combines methods facilitate plotting.  can add points facet data category, add customization:","code":"p$gg_curves() p$gg_curves() +    ggtitle(\"Pangenome and Coregenome curves\") +    geom_point() +    facet_wrap(~Category, scales = 'free_y') +    theme_bw(base_size = 15) +    scale_color_brewer(palette = \"Accent\")"},{"path":"https://iferres.github.io/pagoo/articles/Methods_Plots.html","id":"pca-biplot","dir":"Articles","previous_headings":"Visualization methods","what":"PCA Biplot","title":"Methods and Plots","text":"biplot visualizing first 2 principal components PCA always useful early stages analysis explore possible association genomes based gene content. method uses $pan_pca() method perform PCA, allows use organism metadata color points. Since metadata associated organism, use color organisms according country variable.","code":"p$organisms ## DataFrame with 7 rows and 8 columns ##          org          id      strain      year     country        host ##     <factor> <character> <character> <integer> <character> <character> ## 1 16244_6_6         FR15   2008/170h      2008      France       Human ## 2 16244_6_18        FR27   2012/185h      2012      France       Human ## 3 17059_2_16         AR1      99/801      1999   Argentina      Bovine ## 4 17059_2_23         AR8      04/875      2004   Argentina      Bovine ## 5 17059_2_27        AR12      06/195      2006   Argentina      Bovine ## 6 17150_1_73         CA1   001A-0374      2005      Canada       Human ## 7 17059_2_42         TW6        1830      2008      Taiwan       Human ##        source   accession ##   <character> <character> ## 1       Feces   ERS672247 ## 2       Blood   ERS672259 ## 3     Prepuce   ERS739235 ## 4       Fetus   ERS739242 ## 5          VM   ERS739246 ## 6       Blood   ERS686652 ## 7       Blood   ERS739261 p$gg_pca(colour = 'host', size = 4) +    theme_bw(base_size = 15) +   scale_color_brewer(palette = \"Set2\")"},{"path":"https://iferres.github.io/pagoo/articles/Methods_Plots.html","id":"shiny-app","dir":"Articles","previous_headings":"","what":"Shiny App","title":"Methods and Plots","text":"Last least, can deploy local shiny app just one line code. can explore online example pagoo shiny app complete set 69 Campylobacter fetus genomes following url: https://microgenlab.shinyapps.io/pagoo_campylobacter/ . method currently intended large complex datasets, may render slow. work big pangenomes recommend use R command line, tens hundred genomes works fairly good patience.","code":"p$runShinyApp()"},{"path":"https://iferres.github.io/pagoo/articles/Querying_Data.html","id":"summary-statistics","dir":"Articles","previous_headings":"","what":"Summary statistics","title":"Querying Data","text":"pangenome can stratified different gene subsets according frequency dataset. core genes can defined present almost every genome (typically 95-100%). remaining genes defined accessory genome, can subdivided cloud genes singletons (present one genome genomes identical) shell genes middle. Let’s see using pagoo:","code":"p$summary_stats ## DataFrame with 4 rows and 2 columns ##      Category    Number ##   <character> <integer> ## 1       Total      2588 ## 2        Core      1627 ## 3       Shell       413 ## 4       Cloud       548"},{"path":"https://iferres.github.io/pagoo/articles/Querying_Data.html","id":"core-level","dir":"Articles","previous_headings":"Summary statistics","what":"Core level","title":"Querying Data","text":"core level defines minimum number genomes (percentage) certain gene present considered core gene. default, pagoo considers core genes present least 95% organisms. core level can modified less stringent defining core genome. feature exemplifies R6’s reference semantics, since modifying core level affect pangenome object state resulting different core, shell cloud sets. look: can see, changing core level 95% stringent 100% cause decrease number core genes 1627 1554, concomitant increase shell genes 413 486. means 73 genes migrated core shell increasing threshold consider cluster “core” 100%. Now changes remain object subsequent analysis, can reverted setting core level original value.","code":"p$core_level ## [1] 95 p$core_level <- 100 # Change value p$summary_stats     # Updated object ## DataFrame with 4 rows and 2 columns ##      Category    Number ##   <character> <integer> ## 1       Total      2588 ## 2        Core      1554 ## 3       Shell       486 ## 4       Cloud       548 p$core_level <- 95"},{"path":"https://iferres.github.io/pagoo/articles/Querying_Data.html","id":"pangenome-matrix","dir":"Articles","previous_headings":"","what":"Pangenome matrix","title":"Querying Data","text":"pangenome matrix one useful things analyzing pangenomes. Typically, represents organisms rows clusters orthologous columns informing gene abundance (considering paralogues). pangenome matrix looks like (printing first 5 columns):","code":"p$pan_matrix[, 1:5] ##            group0001 group0002 group0003 group0004 group0005 ## 16244_6_6          1         1         1         1         1 ## 16244_6_18         1         1         1         1         1 ## 17059_2_16         1         1         1         1         1 ## 17059_2_23         1         1         1         1         0 ## 17059_2_27         1         1         1         1         1 ## 17150_1_73         1         1         1         1         1 ## 17059_2_42         1         1         1         1         0"},{"path":"https://iferres.github.io/pagoo/articles/Querying_Data.html","id":"gene-metadata","dir":"Articles","previous_headings":"","what":"Gene metadata","title":"Querying Data","text":"Individual gene metadata can accessed using $genes suffix. always contains gene name, organism belongs, cluster assigned, gene identifier (gid) mainly used internally organize data. Also, may typically include annotation data, genomic coordinates, etc, metadata optional. Gene metadata spitted cluster, consist List DataFrames. want work data single DataFrame, just unlist : pagoo also includes predefined subsets fields list certain pangenome category, queried adding prefix desired category followed underscore: $core_genes, $shell_genes, $cloud_genes. kind subsets better explained ‘4 - Subets’ tutorial, also apply pangenome data described .","code":"p$genes ## SplitDataFrameList of length 2588 ## $group0001 ## DataFrame with 7 rows and 10 columns ##     cluster        org             gene                    gid    geneName ##    <factor>   <factor>         <factor>            <character> <character> ## 1 group0001 16244_6_6  16244_6_6_00150  16244_6_6__16244_6_6..        ilvC ## 2 group0001 16244_6_18 16244_6_18_00172 16244_6_18__16244_6_..        ilvC ## 3 group0001 17059_2_16 17059_2_16_01012 17059_2_16__17059_2_..        ilvC ## 4 group0001 17059_2_23 17059_2_23_01040 17059_2_23__17059_2_..        ilvC ## 5 group0001 17059_2_27 17059_2_27_00492 17059_2_27__17059_2_..        ilvC ## 6 group0001 17150_1_73 17150_1_73_00221 17150_1_73__17150_1_..        ilvC ## 7 group0001 17059_2_42 17059_2_42_00176 17059_2_42__17059_2_..        ilvC ##                  product                 contig      from        to      strand ##              <character>            <character> <integer> <integer> <character> ## 1 ketol-acid reductois.. ERS672247|SC|contig0..    137333    138355           + ## 2 ketol-acid reductois.. ERS672259|SC|contig0..    173541    174563           + ## 3 ketol-acid reductois.. ERS739235|SC|contig0..     43645     44667           - ## 4 ketol-acid reductois.. ERS739242|SC|contig0..    173578    174600           + ## 5 ketol-acid reductois.. ERS739246|SC|contig0..    184035    185057           - ## 6 ketol-acid reductois.. ERS686652|SC|contig0..    207206    208228           + ## 7 ketol-acid reductois.. ERS739261|SC|contig0..    173569    174591           + ##  ## $group0002 ## DataFrame with 7 rows and 10 columns ##     cluster        org             gene                    gid    geneName ##    <factor>   <factor>         <factor>            <character> <character> ## 1 group0002 16244_6_6  16244_6_6_01290  16244_6_6__16244_6_6..        hprA ## 2 group0002 16244_6_18 16244_6_18_01307 16244_6_18__16244_6_..        hprA ## 3 group0002 17059_2_16 17059_2_16_01627 17059_2_16__17059_2_..        hprA ## 4 group0002 17059_2_23 17059_2_23_00348 17059_2_23__17059_2_..        hprA ## 5 group0002 17059_2_27 17059_2_27_01208 17059_2_27__17059_2_..        hprA ## 6 group0002 17150_1_73 17150_1_73_01398 17150_1_73__17150_1_..        hprA ## 7 group0002 17059_2_42 17059_2_42_00751 17059_2_42__17059_2_..        hprA ##                  product                 contig      from        to      strand ##              <character>            <character> <integer> <integer> <character> ## 1 2-hydroxyacid dehydr.. ERS672247|SC|contig0..    274585    275517           - ## 2 2-hydroxyacid dehydr.. ERS672259|SC|contig0..    272748    273680           - ## 3 2-hydroxyacid dehydr.. ERS739235|SC|contig0..     11617     12549           + ## 4 2-hydroxyacid dehydr.. ERS739242|SC|contig0..    308107    309039           - ## 5 2-hydroxyacid dehydr.. ERS739246|SC|contig0..    114555    115487           - ## 6 2-hydroxyacid dehydr.. ERS686652|SC|contig0..    273866    274798           - ## 7 2-hydroxyacid dehydr.. ERS739261|SC|contig0..     15409     16341           + ##  ## ... ## <2586 more elements> unlist(p$genes, use.names = FALSE)"},{"path":"https://iferres.github.io/pagoo/articles/Querying_Data.html","id":"clusters-metadata","dir":"Articles","previous_headings":"","what":"Clusters metadata","title":"Querying Data","text":"Groups orthologues (clusters) also stored pagoo objects table cluster identifier per row, optional metadata associated additional columns. Subsets also exists field: $core_clusters, $shell_clusters, $cloud_clusters.","code":"p$clusters ## DataFrame with 2588 rows and 2 columns ##        cluster              Pfam_Arch ##       <factor>            <character> ## 1    group0001           2-Hacid_dh_C ## 2    group0002 2-Hacid_dh_C;2-Hacid.. ## 3    group0003 2-Hacid_dh_C;ACT;2-H.. ## 4    group0004        2Fe-2S_thioredx ## 5    group0005    4HB_MCP_1;MCPsignal ## ...        ...                    ... ## 2584 group2584              zf-RING_7 ## 2585 group2585               zf-TFIIB ## 2586 group2586                   ZinT ## 2587 group2587                   ZnuA ## 2588 group2588               ZT_dimer"},{"path":"https://iferres.github.io/pagoo/articles/Querying_Data.html","id":"sequences","dir":"Articles","previous_headings":"","what":"Sequences","title":"Querying Data","text":"Although optional field (exists user provide data argument object created), $sequences gives access sequence data. Sequences stored List DNAStringSet (.k.DNAStringSetList, Biostrings package), grouped cluster. Note sequence names created pasting organism names gene names, separated string default sep = '__' (two underscores). gid column $genes field, initially set pagoo object created. think dataset contain names separator, set parameter string avoid conflicts. $sequences field also predefined subsets: $core_sequences, $shell_sequences, $cloud_sequences.","code":"p$sequences             # List all sequences grouped by cluster ## DNAStringSetList of length 2588 ## [[\"group0001\"]] 16244_6_6__16244_6_6_00150=ATGGCGATAACAGTTTATTACGACAAAGATTGCG... ## [[\"group0002\"]] 16244_6_6__16244_6_6_01290=ATGAAAATAGTATGCTTAGATGCCGACACGCTTG... ## [[\"group0003\"]] 16244_6_6__16244_6_6_01710=ATGAAAACAGTTATAGTTTGCGATGCAATACATC... ## [[\"group0004\"]] 16244_6_6__16244_6_6_01754=ATGAAATTCGAATTTACTCATGAGCAATTATCGG... ## [[\"group0005\"]] 16244_6_6__16244_6_6_00049=ATGTCAAATTTAACTACTAACTTAACTACCAAAA... ## [[\"group0006\"]] 16244_6_6__16244_6_6_01069=ATGAATTATTTTGAGAATTTAAAAGTTTCAACAA... ## [[\"group0007\"]] 16244_6_6__16244_6_6_01612=ATGCGAATTAGAATTTATTATGAAGATACCGATG... ## [[\"group0008\"]] 16244_6_6__16244_6_6_01679=ATGATGAAAGATATGGGCGAGCCACGTATAAAAA... ## [[\"group0009\"]] 16244_6_18__16244_6_18_01216=ATGGGGCTTACTACGAGTACGACAAAGTATAT... ## [[\"group0010\"]] 16244_6_6__16244_6_6_00758=ATGAAAAGAGTGGTTATAAAAGTAGGCTCTCACG... ## ... ## <2578 more elements> p$sequences[[\"group0001\"]]  # List first cluster ## DNAStringSet object of length 7: ##     width seq                                               names                ## [1]  1023 ATGGCGATAACAGTTTATTACGA...TAGTTAATAAAGACAAAAATTAA 16244_6_6__16244_... ## [2]  1023 ATGGCGATAACAGTTTATTACGA...TAGTTAATAAAGACAAAAATTAA 16244_6_18__16244... ## [3]  1023 ATGGCGATAACAGTTTATTACGA...TAGTTAATAAAGACAAAAATTAA 17059_2_16__17059... ## [4]  1023 ATGGCGATAACAGTTTATTACGA...TAGTTAATAAAGACAAAAATTAA 17059_2_23__17059... ## [5]  1023 ATGGCGATAACAGTTTATTACGA...TAGTTAATAAAGACAAAAATTAA 17059_2_27__17059... ## [6]  1023 ATGGCGATAACAGTTTATTACGA...TAGTTAATAAAGACAAAAATTAA 17150_1_73__17150... ## [7]  1023 ATGGCGATAACAGTTTATTACGA...TAGTTAATAAAGACAAAAATTAA 17059_2_42__17059..."},{"path":"https://iferres.github.io/pagoo/articles/Querying_Data.html","id":"organism-metadata","dir":"Articles","previous_headings":"","what":"Organism metadata","title":"Querying Data","text":"$organisms field contain table organisms metadata additional columns provided.","code":"p$organisms ## DataFrame with 7 rows and 8 columns ##          org          id      strain      year     country        host ##     <factor> <character> <character> <integer> <character> <character> ## 1 16244_6_6         FR15   2008/170h      2008      France       Human ## 2 16244_6_18        FR27   2012/185h      2012      France       Human ## 3 17059_2_16         AR1      99/801      1999   Argentina      Bovine ## 4 17059_2_23         AR8      04/875      2004   Argentina      Bovine ## 5 17059_2_27        AR12      06/195      2006   Argentina      Bovine ## 6 17150_1_73         CA1   001A-0374      2005      Canada       Human ## 7 17059_2_42         TW6        1830      2008      Taiwan       Human ##        source   accession ##   <character> <character> ## 1       Feces   ERS672247 ## 2       Blood   ERS672259 ## 3     Prepuce   ERS739235 ## 4       Fetus   ERS739242 ## 5          VM   ERS739246 ## 6       Blood   ERS686652 ## 7       Blood   ERS739261"},{"path":"https://iferres.github.io/pagoo/articles/Recipes.html","id":"publication-quality-figures","dir":"Articles","previous_headings":"","what":"Publication-quality figures","title":"Recipes","text":"section 5 - Methods Plots introduced set several plots pagoo can generate basic exploration pangenome features. plots generated using ggplot2, aesthetic features can easily improved. show pagoo interacts ggplot2 extensions produce publication-quality figures previous standard pangenome plots, allowing flexible styling reproducible generation figures. customization already shown previous tutorials.","code":"library(ggplot2) library(patchwork)  # 1. Pangenome curves curves <- p$gg_curves() +                                     # Plot core- and pan-genome curves           scale_color_manual(values = c('black', 'black')) +  # Customize line colors           geom_point(alpha = .05, size = 4, color = 'grey') + # Add semi-transparent data points           theme_bw(base_size = 15) +                          # Customize background theme           theme(legend.position = 'none',                     # Remove legend         axis.title = element_text(size = 12),                     # Customize axis title         axis.text = element_text(size = 12))                      # Customize axis text size  # 2. Gene frequency bar plots bars <- p$gg_barplot() +                                       # Plot gene frequency distribution   theme_bw(base_size = 15) +                                   # Customize background color   theme(axis.title = element_text(size = 12),                  # Customize axis label size         axis.text=element_text(size = 12)) +                   # Customize axis text size   geom_bar(stat = 'identity', color = 'black', fill = 'black') # Customize bar color and borders  # 3. PCA of accessory genes colored by host pca <- p$gg_pca(colour = 'host', size = 4) +                # Plot PCA, color by host   theme_bw(base_size = 15) +                                # Customize background theme   theme(legend.position = 'bottom') +                       # Customize legend position   theme(axis.title = element_text(size = 12),               # Customize axis title         axis.text = element_text(size = 12))                # Customize axis text size  # 4. Pie chart of core and accessory genes pie <- p$gg_pie() +                                         # Plot pie chart   theme_bw(base_size = 15) +                                # Customize background theme   scale_fill_discrete(guide = guide_legend(keywidth = .75,                                            keyheight = .75)) + # Customize fill   scale_fill_brewer(palette = \"Blues\") +                    # Customize fill color   scale_x_discrete(breaks = c(0, 25, 50, 75)) +             # Customize axis scales   theme(legend.position = 'bottom',                         # Customize legend position         legend.title = element_blank(),                     # Remove legend title         legend.text = element_text(size = 10),              # Change legend text size         legend.margin = margin(0, 0, 13, 0),                # Change legend margins         legend.box.margin = margin(0, 0, 5, 0),             # Change box margins         axis.title.x = element_blank(),                     # Remove X-axis title         axis.title.y = element_blank(),                     # Remove Y-axis title         axis.ticks = element_blank(),                       # Remove axis ticks         axis.text.x = element_blank())                      # Remove X-axis text   # 5. Use patchwork to arrange plots using math operators (curves + bars) / (pca + pie)"},{"path":[]},{"path":"https://iferres.github.io/pagoo/articles/Recipes.html","id":"estimation-of-core-and-pangenome-sizes","dir":"Articles","previous_headings":"Publication-quality figures > Using micropan Methods","what":"Estimation of Core and Pangenome Sizes","title":"Recipes","text":"Given panmatrix, predict number core clusters total number clusters pangenome. Several methods developed purpose, case binomial mixture model implemented micropan package used describe distribution gene clusters across genomes pangenome. use method, simply pass object’s pan-matrix micropan::binomixEstimate function: Given using small toy dataset, results really meaningful.","code":"library(micropan)  micropan::binomixEstimate(p$pan_matrix)"},{"path":"https://iferres.github.io/pagoo/articles/Recipes.html","id":"fluidity","dir":"Articles","previous_headings":"Publication-quality figures > Using micropan Methods","what":"Fluidity","title":"Recipes","text":"Genomic fluidity measure population diversity. ’s somehow similar computing jaccard distances, genomic fluidity describes whole population whereas jaccard distances computed pairwise. , passing object’s pan-matrix micropan::fluidity function. case, lets use magrittr’s %>% operator pipe , compute fluidity using 100 random samples:","code":"library(micropan) library(magrittr)  p$pan_matrix %>% micropan::fluidity(n.sim = 100)"},{"path":"https://iferres.github.io/pagoo/articles/Recipes.html","id":"annotate-clusters","dir":"Articles","previous_headings":"","what":"Annotate clusters","title":"Recipes","text":"common practice improve annotation quality pangenome retrieve single representative sequence cluster ‘blast’ given database. best hits annotation transferred clusters. EggNOG database comprehensive well curated resource includes annotation many databases (e.g. KEGG, COG, CAZy, etc), eggnog-mapper tool allows easily transfer annotation given query sequence. recipe shows write multi-fasta file containing one representative sequence cluster annotate EggNOG-mapper tool, shows add new information pangenome object. first step retrieve single representative sequence cluster, translate , finally write multi-fasta file: Now user provide representatives.fasta input file eggnog-mapper. can done web server, command line installed. command (terminal) look somewhat like : read *.emapper.annotations file R session, feed pangenome object information:","code":"p$sequences %>%                                     # Get the sequences   lapply(\"[[\", 1) %>%                               # Select the first one as representative.   unlist() %>%                                      # Unlist and..   DNAStringSet() %>%                                # ..transform to DNAStringSet.   translate(if.fuzzy.codon = \"solve\") %>%           # Translate.   writeXStringSet(filepath = \"representatives.fasta\") # Write a fasta file. emapper.py -i representative.fasta -o representative_emapper library(magrittr)  # Read the annotations file emap <- read.csv(\"representatives.emapper.annotations\",                  sep = \"\\t\",                  comment.char = \"#\",                  header = FALSE,                  na.strings = \"-\")  # Set column names colnames(emap) <- c(\"query\", \"seed_ortholog\", \"evalue\", \"score\", \"eggNOG_OGs\",                     \"max_annot_lvl\", \"COG_category\", \"Description\", \"Preferred_name\",                     \"GOs\", \"EC\", \"KEGG_ko\", \"KEGG_Pathway\", \"KEGG_Module\", \"KE\",                     \"GG_Reaction\", \"KEGG_rclass\", \"BRITE\", \"CAZy\",                     \"BiGG_Reaction\", \"PFAMs\")  # Lets take only some of them which I usually find useful. Subset the data.frame: cluster_meta <- emap[, c(\"query\", \"COG_category\", \"KEGG_ko\", \"CAZy\")]  # Clean and parse the fields before feeding it to the pangenome cluster_meta$COG_category <- cluster_meta$COG_category %>% strsplit(\"\") cluster_meta$KEGG_ko <- clusert_meta$KEGG_ko %>%   gsub(\"ko:\", \"\", .) %>%   strsplit(\",\") cluster_meta$CAZy <- cluster_meta$CAZy %>% strsplit(\"\")  # Add the metadata to the pangenome clusters p$add_metadata(\"cluster\", cluster_meta)  # Now the object contains the new information in the clusters field: p$clusters"},{"path":"https://iferres.github.io/pagoo/articles/Recipes.html","id":"neutral-genes","dir":"Articles","previous_headings":"","what":"Neutral genes","title":"Recipes","text":"core genome composed genes present every almost every genome sample. genes present genomes, can used extract important biological information like phylogenetic relationships, study recombination selective pressures. , core genes need aligned. next sections explain perform mentioned downstream analyses. reveal vertical evolutionary history bacterial population take account presence horizontal acquisition genetic material, like means recombination, maintained action natural selection. Hence, can use Tajima’s D test neutrality implemented pegas ( Paradis, 2010) identify core genes subjected strong selective pressures likely evolving neutrally.","code":"# Load required packages library(magrittr) library(DECIPHER) library(pegas) library(ape)  p$core_level <- 100                       # Set core_level to 100% to avoid                                            #  AlignTranslation() errors.  tajimaD <- p$core_seqs_4_phylo() %>%      # Core genome sequences   lapply(DECIPHER::AlignTranslation) %>%  # Align translation   lapply(ape::as.DNAbin) %>%              # Transform class to DNAbin   lapply(pegas::tajima.test) %>%          # Compute Tajima's test   sapply('[[', 'D')                       # Get Tajima's 'D' statistic from each  # Which are neutral? which(tajimaD <= 0.2 & tajimaD >= -0.2)"},{"path":"https://iferres.github.io/pagoo/articles/Recipes.html","id":"quick-dirty-phylogeny","dir":"Articles","previous_headings":"","what":"Quick dirty phylogeny","title":"Recipes","text":"best practices build phylogeny core genomes topic debate. first example provide one-liner align individual core genes (like previous case), produce concatenated core genome alignment, calculate core genome phylogeny using Neighbor-Joining method implemented phangorn (Schliep, 2011), visualize using host metadata color tree tips using ggtree (Yu et al., 2017). Phylogenetic tree assigned phy variable, plotted side effect using magrittr’s %T>% operator.","code":"# Load required packages library(magrittr) library(DECIPHER) library(Biostrings) library(phangorn) library(ggtree)  phy <- p$core_seqs_4_phylo() %>%                 # Core genome sequences   lapply(DECIPHER::AlignSeqs) %>%                # Align   do.call(Biostrings::xscat, .) %>%              # Concatenate alignments   setNames(p$organisms$org) %>%                  # Set sequence names   as('matrix') %>%                               # Transform to matrix   phangorn::phyDat(type = 'DNA') %>%             # Transform to phangorn's phyDat   phangorn::dist.ml() %>%                        # Compute distance   phangorn::NJ() %T>% {                          # Compute NJ, and assign \"phy\"     {       ggtree::ggtree(.) %<+%                        # Create ggtree         as.data.frame(p$organisms) +                # Get organisms metadata         ggtree::geom_tippoint(aes(colour = host)) + # Add coloured tip points         scale_color_brewer(palette = 'Set1')        # Set color palette     } %>%       print() }"},{"path":"https://iferres.github.io/pagoo/articles/Recipes.html","id":"maximum-likelihood-phylogeny","dir":"Articles","previous_headings":"","what":"Maximum Likelihood phylogeny","title":"Recipes","text":"following method similar previous, case optimizing topology branch lengths maximum likelihood method implemented phangorn package. Although fully working example, purpose just illustrate idea. consider tuning parameters better fit dataset (e.g.: just 4 discrete gamma distributions whole coregenome alignment may low).","code":"# Load required packages library(magrittr) library(DECIPHER) library(Biostrings) library(phangorn) library(ggtree)  phy <- p$core_seqs_4_phylo() %>%                 # Core genome sequences   lapply(DECIPHER::AlignSeqs) %>%                # Align   do.call(Biostrings::xscat, .) %>%              # Concatenate alignments   setNames(p$organisms$org) %>%                  # Set sequence names   as('matrix') %>%                               # Transform to matrix   phangorn::phyDat(type = 'DNA') %T>%            # Transform to phangorn's phyDat   assign('dat', ., .GlobalEnv) %>%               # Assign to \"dat\" in .GlobalEnv   phangorn::dist.ml() %>%                        # Compute distance   phangorn::NJ() %>%                             # Compute NJ (initial tree)   phangorn::pml(data = dat, k = 4) %>%           # Compute likelihood with 4 discrete                                                  #  gamma distributions.    phangorn::optim.pml(rearrangement = \"stochastic\", # Optimize likelihood with                                                  # stochastic rearrangements,                       optGamma = TRUE,           # optimize gamma rate parameter,                       optInv = TRUE,             # optimize prop of variable size,                       model =\"GTR\") %>%          # and use \"GTR\" model.   magrittr::extract2(\"tree\") %T>% {              # Extract the tree only, and pass     {                                            #  it to ggtree.       ggtree::ggtree(.) %<+%                        # Create ggtree         as.data.frame(p$organisms) +                # Get organisms metadata         ggtree::geom_tippoint(aes(colour = host)) + # Add coloured tip points         scale_color_brewer(palette = 'Set1')        # Set color palette     } %>%     print()   }"},{"path":"https://iferres.github.io/pagoo/articles/Recipes.html","id":"population-structure","dir":"Articles","previous_headings":"","what":"Population structure","title":"Recipes","text":"Identifying population structure genomic information common problem microbial ecology. aims identify discrete sub-populations within heterogeneous population, helpful detect associations particular phenotypes, geographic origin, host-association, etc. various methods , probably used microbial genomics hierBAPS (Cheng et al., 2013) re-implemented R rhierBAPS (Tonkin-Hill et al., 2018). following recipe combine previous examples 1) align core clusters; 2) compute Tajima’s D statistic aligned core clusters identify ones likely evolving neutrally; 3) concatenate selected neutral clusters; 4) Run hierBAPS algorithm; 5) extract lineage information add pagoo object organism’s metadata; 6) compute plot tree lineage information colour tips.","code":"library(magrittr) library(DECIPHER) library(rhierbaps) library(ape) library(phangorn)  # 0. Always use core_level at 100% when using DECIPHER::AlignTranslation() p$core_level <- 100  # 1. Align translation of core genes ali <- p$core_seqs_4_phylo() %>%           # Core genome sequences   lapply(DECIPHER::AlignTranslation)       # Align translation  # 2. Identify neutral core clusters tajD <- ali %>%   lapply(ape::as.DNAbin) %>%              # Transform class to DNAbin   lapply(pegas::tajima.test) %>%          # Compute Tajima's test   sapply('[[', 'D')                       # Subset D statistic  neutral <- which(tajD <= 2 & tajD >= -2)  # 3. Concatenate neutral core clusters concat_neu <- ali[neutral] %>%            # Select neutral clusters   do.call(Biostrings::xscat, .) %>%       # Concatenate alignments   setNames(p$organisms$org) %>%           # Set sequence names   as('matrix') %>%                        # Transform to matrix   tolower()                               # Translate to lower case  # 4. Compute structure rhb <- hierBAPS(snp.matrix = concat_neu, # Input matrix alignment                 n.pops = 10,             # Max number of subpopulations                 max.depth = 1,           # Max depth for hierarchical clustering                 n.extra.rounds = 5)      # Extra rounds to ensure convergence  # 5. Add lineage as metadata to organisms in pagoo object res <- rhb$partition.df lin <- data.frame(org = as.character(res[, 1]),                    lineage = as.factor(res[, 2])) p$add_metadata(map = 'org', data = lin)  # 6. Compute tree and plot it with lineage information concat_neu %>%   phangorn::phyDat(type = 'DNA') %>%                # Transform to phangorn's phyDat   phangorn::dist.ml() %>%                           # Compute distance   phangorn::NJ() %>%                                # Compute NJ   ggtree::ggtree() %<+%                             # Create ggtree      as.data.frame(p$organisms) +                   # Get organisms metadata      ggtree::geom_tippoint(aes(colour = lineage))   # Colour tips with lineage info"},{"path":"https://iferres.github.io/pagoo/articles/Recipes.html","id":"pairwise-distance-vs-pairwise-nucleotide-diversity","dir":"Articles","previous_headings":"","what":"Pairwise distance vs pairwise nucleotide diversity","title":"Recipes","text":"following recipe computes accessory genome jaccard’s distance nucleotide diversity synonym sites pair genomes, plot linear regression curve. method provides insights accessory genome adaptative evolution. magnitudes correlated, mean selective pressures shaping clade’s evolution. first sets core_level threshold 100%, creates matrix store pairwise distances synonym nucleotide diversities. Accessory genome Jaccard distance pair organisms computed pagoo method basically wrapper vegan::vegdist function. long code block method align core gene select polymorphic synonym sites. input, pairwise nucleotide diversity computed pegas::nuc.div function. end, correlation magnitudes plotted.","code":"library(magrittr) library(IRanges) library(Biostrings) library(DECIPHER) library(ape) library(pegas)  # Set core level to 100%. This recipe only works if this is set to 100%. p$core_level <- 100  # Create pairs matrix pairs <- data.frame(t(combn(nrow(p$organisms), 2))) colnames(pairs) <- c('org1', 'org2')  # Compute paired jaccard similarity, transform to matrix jaccard_sim <- as.matrix(p$dist(method = \"jaccard\", binary = TRUE)) # Fill results matrix pairs$jaccard_sim <- apply(pairs, 1, function(i){   ii <- i[1]   jj <- i[2]   jaccard_sim[ii, jj] })  # Return only synonymous polymorphic sites. # First, it removes non-synonymous codons, and then retains only # polymorphyc sites. syn_poly_sites <- p$core_seqs_4_phylo() %>%   lapply(function(x){     lns <- elementNROWS(x)                              # Align translatation filtering     tali <- x[which(lns != 0)] %>%                      #  truncated codons and returning       Biostrings::subseq(1L, lns %/% 3 * 3) %>%         #  both DNA and AA alignments.       DECIPHER::AlignTranslation(type = \"both\")     syno <-  tali[[2]] %>%                              # Identify non-synonymous       Biostrings::consensusMatrix() %>%                 #  codons.       magrittr::equals(0) %>%       magrittr::not() %>%       colSums() %>%       magrittr::equals(1) %>%       which()     neut <- tali[[1]] %>%                               # Remove non-synonymous codons.       lapply(function(x){         IRanges::successiveViews(           x, rep.int(3L, length(x) %/% 3L))       }) %>%       lapply('[', syno) %>%       lapply(unlist) %>%       Biostrings::DNAStringSet()     poly <- neut %>%                                   # Identify polymorphic sites.       Biostrings::consensusMatrix() %>%       magrittr::equals(0) %>%       magrittr::not() %>%       colSums() %>%       magrittr::is_greater_than(1) %>%       which()     lapply(neut, '[', poly) %>%                        # Retain only polymorphic       Biostrings::DNAStringSet()                       #  sites   }) %>%   do.call(Biostrings::xscat, .) %>%                    # Concatenate.   setNames(p$organisms$org) %>%                        # Set names.   ape::as.DNAbin()                                     # Convert to DNAbin class.  # Compute paired nucleotide diversity, and fill results matrix pairs$nuc_div <- apply(pairs, 1, function(i){   ii <- i[1]   jj <- i[2]   pair <- c(syn_poly_sites[ii], syn_poly_sites[jj])   pegas::nuc.div(pair) })  # Plot correlation with R-base graphics plot(jaccard_sim ~ nuc_div, pairs) abline(lm(jaccard_sim ~ nuc_div, pairs))"},{"path":"https://iferres.github.io/pagoo/articles/Subseting.html","id":"predefined-subsets","dir":"Articles","previous_headings":"","what":"Predefined Subsets","title":"Subseting","text":"Predefined subsets already superficially seen 3 - Querying Data tutorial. review understand notation. seen table, notation quite straightforward. Lets take clusters instance illustrate better.","code":"p$clusters ## DataFrame with 2588 rows and 2 columns ##        cluster              Pfam_Arch ##       <factor>            <character> ## 1    group0001           2-Hacid_dh_C ## 2    group0002 2-Hacid_dh_C;2-Hacid.. ## 3    group0003 2-Hacid_dh_C;ACT;2-H.. ## 4    group0004        2Fe-2S_thioredx ## 5    group0005    4HB_MCP_1;MCPsignal ## ...        ...                    ... ## 2584 group2584              zf-RING_7 ## 2585 group2585               zf-TFIIB ## 2586 group2586                   ZinT ## 2587 group2587                   ZnuA ## 2588 group2588               ZT_dimer p$core_clusters ## DataFrame with 1627 rows and 2 columns ##        cluster              Pfam_Arch ##       <factor>            <character> ## 1    group0001           2-Hacid_dh_C ## 2    group0002 2-Hacid_dh_C;2-Hacid.. ## 3    group0003 2-Hacid_dh_C;ACT;2-H.. ## 4    group0004        2Fe-2S_thioredx ## 5    group0006    4HB_MCP_1;MCPsignal ## ...        ...                    ... ## 1623 group2584              zf-RING_7 ## 1624 group2585               zf-TFIIB ## 1625 group2586                   ZinT ## 1626 group2587                   ZnuA ## 1627 group2588               ZT_dimer p$shell_clusters ## DataFrame with 413 rows and 2 columns ##       cluster            Pfam_Arch ##      <factor>          <character> ## 1   group0005  4HB_MCP_1;MCPsignal ## 2   group0009        5_nucleotid_C ## 3   group0015                  AAA ## 4   group0019               AAA_22 ## 5   group0021               AAA_22 ## ...       ...                  ... ## 409 group2537 VirB3;CagE_TrbE_VirB ## 410 group2541                VirB8 ## 411 group2543                VirB8 ## 412 group2554               Y1_Tnp ## 413 group2557           YafQ_toxin p$cloud_clusters ## DataFrame with 548 rows and 2 columns ##       cluster   Pfam_Arch ##      <factor> <character> ## 1   group0018      AAA_22 ## 2   group0020      AAA_22 ## 3   group0024      AAA_25 ## 4   group0025      AAA_25 ## 5   group0028      AAA_28 ## ...       ...         ... ## 544 group2555  YafQ_toxin ## 545 group2566      YhcG_C ## 546 group2573        YopX ## 547 group2578  Zeta_toxin ## 548 group2579  Zeta_toxin"},{"path":"https://iferres.github.io/pagoo/articles/Subseting.html","id":"the-operator","dir":"Articles","previous_headings":"","what":"The [ operator","title":"Subseting","text":"Using [ subset vectors, lists, matrices R one common operations , R users, every day. Methods using [ subsetting can divided 2 types: Subsetting vector list like objects. Subsetting matrix-like objects. following subsections see use subset $pan_matrix, $genes, $clusters, $sequences, $organisms fields.","code":""},{"path":"https://iferres.github.io/pagoo/articles/Subseting.html","id":"vectorlist-notation","dir":"Articles","previous_headings":"The [ operator","what":"Vector/List notation","title":"Subseting","text":"subset vector list R use single number vector numbers, lets say j, pick elements indexes: x[:j]. pagoo implement method generic function subset data fields, indexes represent clusters. instead subsetting directly final object (can course) apply method directly object, select data fields. Note case, indexes can interpreted clusters. pan_matrix refer columns, genes sequences elements list, clusters rows dataframe, case $organisms returns organisms (rows) clusters present. See happen last case query organisms present shell cluster: (6) organisms contain shell cluster listed.","code":"# From clusters 1 to 3 p[c(1, 5, 18)]$pan_matrix ##            group0001 group0005 group0018 ## 16244_6_6          1         1         0 ## 16244_6_18         1         1         0 ## 17059_2_16         1         1         0 ## 17059_2_23         1         0         0 ## 17059_2_27         1         1         0 ## 17150_1_73         1         1         0 ## 17059_2_42         1         0         1 p[c(1, 5, 18)]$genes ## SplitDataFrameList of length 3 ## $group0001 ## DataFrame with 7 rows and 10 columns ##     cluster        org             gene                    gid    geneName ##    <factor>   <factor>         <factor>            <character> <character> ## 1 group0001 16244_6_6  16244_6_6_00150  16244_6_6__16244_6_6..        ilvC ## 2 group0001 16244_6_18 16244_6_18_00172 16244_6_18__16244_6_..        ilvC ## 3 group0001 17059_2_16 17059_2_16_01012 17059_2_16__17059_2_..        ilvC ## 4 group0001 17059_2_23 17059_2_23_01040 17059_2_23__17059_2_..        ilvC ## 5 group0001 17059_2_27 17059_2_27_00492 17059_2_27__17059_2_..        ilvC ## 6 group0001 17150_1_73 17150_1_73_00221 17150_1_73__17150_1_..        ilvC ## 7 group0001 17059_2_42 17059_2_42_00176 17059_2_42__17059_2_..        ilvC ##                  product                 contig      from        to      strand ##              <character>            <character> <integer> <integer> <character> ## 1 ketol-acid reductois.. ERS672247|SC|contig0..    137333    138355           + ## 2 ketol-acid reductois.. ERS672259|SC|contig0..    173541    174563           + ## 3 ketol-acid reductois.. ERS739235|SC|contig0..     43645     44667           - ## 4 ketol-acid reductois.. ERS739242|SC|contig0..    173578    174600           + ## 5 ketol-acid reductois.. ERS739246|SC|contig0..    184035    185057           - ## 6 ketol-acid reductois.. ERS686652|SC|contig0..    207206    208228           + ## 7 ketol-acid reductois.. ERS739261|SC|contig0..    173569    174591           + ##  ## $group0005 ## DataFrame with 5 rows and 10 columns ##     cluster        org             gene                    gid    geneName ##    <factor>   <factor>         <factor>            <character> <character> ## 1 group0005 16244_6_6  16244_6_6_00049  16244_6_6__16244_6_6..      mcpB_1 ## 2 group0005 16244_6_18 16244_6_18_00072 16244_6_18__16244_6_..      mcpB_1 ## 3 group0005 17059_2_16 17059_2_16_01270 17059_2_16__17059_2_..      mcpB_3 ## 4 group0005 17059_2_27 17059_2_27_00592 17059_2_27__17059_2_..      mcpB_1 ## 5 group0005 17150_1_73 17150_1_73_00073 17150_1_73__17150_1_..      mcpB_1 ##                  product                 contig      from        to      strand ##              <character>            <character> <integer> <integer> <character> ## 1 methyl-accepting che.. ERS672247|SC|contig0..     46407     48068           + ## 2 methyl-accepting che.. ERS672259|SC|contig0..     82617     84278           + ## 3 methyl-accepting che.. ERS739235|SC|contig0..     82775     84436           + ## 4 methyl-accepting che.. ERS739246|SC|contig0..    274321    275982           - ## 5 methyl-accepting che.. ERS686652|SC|contig0..     82648     84309           + ##  ## $group0018 ## DataFrame with 1 row and 10 columns ##     cluster        org             gene                    gid    geneName ##    <factor>   <factor>         <factor>            <character> <character> ## 1 group0018 17059_2_42 17059_2_42_00333 17059_2_42__17059_2_..             ##                  product                 contig      from        to      strand ##              <character>            <character> <integer> <integer> <character> ## 1 bacteriocin,putative.. ERS739261|SC|contig0..    303996    304949           - p[c(1, 5, 18)]$clusters ## DataFrame with 3 rows and 2 columns ##     cluster           Pfam_Arch ##    <factor>         <character> ## 1 group0001        2-Hacid_dh_C ## 2 group0005 4HB_MCP_1;MCPsignal ## 3 group0018              AAA_22 p[c(1, 5, 18)]$sequences ## DNAStringSetList of length 3 ## [[\"group0001\"]] 16244_6_18__16244_6_18_00172=ATGGCGATAACAGTTTATTACGACAAAGATTG... ## [[\"group0005\"]] 16244_6_18__16244_6_18_00072=ATGTCAAATTTAACTACTAATTTAACTACCAA... ## [[\"group0018\"]] 17059_2_42__17059_2_42_00333=ATGAGTAAATTTGAAGATATTAGGAATGAGCT... p[c(1, 5, 18)]$organisms ## DataFrame with 7 rows and 8 columns ##          org          id      strain      year     country        host ##     <factor> <character> <character> <integer> <character> <character> ## 1 16244_6_6         FR15   2008/170h      2008      France       Human ## 2 16244_6_18        FR27   2012/185h      2012      France       Human ## 3 17059_2_16         AR1      99/801      1999   Argentina      Bovine ## 4 17059_2_23         AR8      04/875      2004   Argentina      Bovine ## 5 17059_2_27        AR12      06/195      2006   Argentina      Bovine ## 6 17150_1_73         CA1   001A-0374      2005      Canada       Human ## 7 17059_2_42         TW6        1830      2008      Taiwan       Human ##        source   accession ##   <character> <character> ## 1       Feces   ERS672247 ## 2       Blood   ERS672259 ## 3     Prepuce   ERS739235 ## 4       Fetus   ERS739242 ## 5          VM   ERS739246 ## 6       Blood   ERS686652 ## 7       Blood   ERS739261 shell_clust <- p$shell_clusters$cluster[1] # [1] \"OG0005\" p[shell_clust]$organisms ## DataFrame with 5 rows and 8 columns ##          org          id      strain      year     country        host ##     <factor> <character> <character> <integer> <character> <character> ## 1 16244_6_6         FR15   2008/170h      2008      France       Human ## 2 16244_6_18        FR27   2012/185h      2012      France       Human ## 3 17059_2_16         AR1      99/801      1999   Argentina      Bovine ## 5 17059_2_27        AR12      06/195      2006   Argentina      Bovine ## 6 17150_1_73         CA1   001A-0374      2005      Canada       Human ##        source   accession ##   <character> <character> ## 1       Feces   ERS672247 ## 2       Blood   ERS672259 ## 3     Prepuce   ERS739235 ## 5          VM   ERS739246 ## 6       Blood   ERS686652"},{"path":"https://iferres.github.io/pagoo/articles/Subseting.html","id":"matrix-notation","dir":"Articles","previous_headings":"The [ operator","what":"Matrix notation","title":"Subseting","text":"use [ notation subset matrix-like object. case provide 2 sets indexes: first rows, second columns, separated coma. pagoo interprets indexes organisms (rows) clusters (columns), referencing set genes (cell value). Basically referencing cells pan_matrix. selecting first 3 organisms, clusters indexed 1, 5, 18. Note see (sum columns) 3 genes first cluster, 3 second, 0 third. Now flip notation subset directly pagoo object, ask data field: selection returns list length 2, 3 elements $genes $sequences, dataframe showing selected clusters $clusters field, dataframe showing selected organisms $organisms field. found implementation quite useful data exploration fine grained analysis.","code":"p$pan_matrix[1:3, c(1, 5, 18)] ##            group0001 group0005 group0018 ## 16244_6_6          1         1         0 ## 16244_6_18         1         1         0 ## 17059_2_16         1         1         0 p[1:3, c(1, 5, 18)]$pan_matrix # The same as above ##            group0001 group0005 group0018 ## 16244_6_6          1         1         0 ## 16244_6_18         1         1         0 ## 17059_2_16         1         1         0 p[1:3, c(1, 5, 18)]$genes ## SplitDataFrameList of length 2 ## $group0001 ## DataFrame with 3 rows and 10 columns ##     cluster        org             gene                    gid    geneName ##    <factor>   <factor>         <factor>            <character> <character> ## 1 group0001 16244_6_6  16244_6_6_00150  16244_6_6__16244_6_6..        ilvC ## 2 group0001 16244_6_18 16244_6_18_00172 16244_6_18__16244_6_..        ilvC ## 3 group0001 17059_2_16 17059_2_16_01012 17059_2_16__17059_2_..        ilvC ##                  product                 contig      from        to      strand ##              <character>            <character> <integer> <integer> <character> ## 1 ketol-acid reductois.. ERS672247|SC|contig0..    137333    138355           + ## 2 ketol-acid reductois.. ERS672259|SC|contig0..    173541    174563           + ## 3 ketol-acid reductois.. ERS739235|SC|contig0..     43645     44667           - ##  ## $group0005 ## DataFrame with 3 rows and 10 columns ##     cluster        org             gene                    gid    geneName ##    <factor>   <factor>         <factor>            <character> <character> ## 1 group0005 16244_6_6  16244_6_6_00049  16244_6_6__16244_6_6..      mcpB_1 ## 2 group0005 16244_6_18 16244_6_18_00072 16244_6_18__16244_6_..      mcpB_1 ## 3 group0005 17059_2_16 17059_2_16_01270 17059_2_16__17059_2_..      mcpB_3 ##                  product                 contig      from        to      strand ##              <character>            <character> <integer> <integer> <character> ## 1 methyl-accepting che.. ERS672247|SC|contig0..     46407     48068           + ## 2 methyl-accepting che.. ERS672259|SC|contig0..     82617     84278           + ## 3 methyl-accepting che.. ERS739235|SC|contig0..     82775     84436           + p[1:3, c(1, 5, 18)]$clusters ## DataFrame with 2 rows and 2 columns ##     cluster           Pfam_Arch ##    <factor>         <character> ## 1 group0001        2-Hacid_dh_C ## 2 group0005 4HB_MCP_1;MCPsignal p[1:3, c(1, 5, 18)]$sequences ## DNAStringSetList of length 2 ## [[\"group0001\"]] 16244_6_18__16244_6_18_00172=ATGGCGATAACAGTTTATTACGACAAAGATTG... ## [[\"group0005\"]] 16244_6_18__16244_6_18_00072=ATGTCAAATTTAACTACTAATTTAACTACCAA... p[1:3, c(1, 5, 18)]$organisms ## DataFrame with 3 rows and 8 columns ##          org          id      strain      year     country        host ##     <factor> <character> <character> <integer> <character> <character> ## 1 16244_6_6         FR15   2008/170h      2008      France       Human ## 2 16244_6_18        FR27   2012/185h      2012      France       Human ## 3 17059_2_16         AR1      99/801      1999   Argentina      Bovine ##        source   accession ##   <character> <character> ## 1       Feces   ERS672247 ## 2       Blood   ERS672259 ## 3     Prepuce   ERS739235"},{"path":"https://iferres.github.io/pagoo/articles/Subseting.html","id":"dropping-and-recovering-organisms","dir":"Articles","previous_headings":"","what":"Dropping and Recovering Organisms","title":"Subseting","text":"One useful feature implemented pagoo possibility easily removing (hiding) organisms dataset. useful analysis identify genome weird characteristics (.e. potentially contaminated), want focus just subset genomes interest given metadata value, included outgroup phylogenetic purposes want remove downstream analyses. Let’s see works..","code":""},{"path":"https://iferres.github.io/pagoo/articles/Subseting.html","id":"dropping-organisms","dir":"Articles","previous_headings":"Dropping and Recovering Organisms","what":"Dropping organisms","title":"Subseting","text":"can see 7 organisms, pangenome summary statistics. Let’s say, instance, want exclude french isolates (reason) dataset, indexed 1 2 (rows) dataframe. see, french organisms removed dataset, also summary statistics updated! also true data field: $pan_matrix, $genes, $clusters, $sequences, $organisms fields automatically updated. Also embedded statistical visualization methods now consider available organisms/clusters/genes. drop organisms, hiding features associated genomes including genes, sequences, gene clusters metadata. ’s important note don’t reassign object new one, self modified (place modification). ’s R6 reference semantics (see R6 documentation details), use caution.","code":"p$organisms ## DataFrame with 7 rows and 8 columns ##          org          id      strain      year     country        host ##     <factor> <character> <character> <integer> <character> <character> ## 1 16244_6_6         FR15   2008/170h      2008      France       Human ## 2 16244_6_18        FR27   2012/185h      2012      France       Human ## 3 17059_2_16         AR1      99/801      1999   Argentina      Bovine ## 4 17059_2_23         AR8      04/875      2004   Argentina      Bovine ## 5 17059_2_27        AR12      06/195      2006   Argentina      Bovine ## 6 17150_1_73         CA1   001A-0374      2005      Canada       Human ## 7 17059_2_42         TW6        1830      2008      Taiwan       Human ##        source   accession ##   <character> <character> ## 1       Feces   ERS672247 ## 2       Blood   ERS672259 ## 3     Prepuce   ERS739235 ## 4       Fetus   ERS739242 ## 5          VM   ERS739246 ## 6       Blood   ERS686652 ## 7       Blood   ERS739261 p$summary_stats ## DataFrame with 4 rows and 2 columns ##      Category    Number ##   <character> <integer> ## 1       Total      2588 ## 2        Core      1627 ## 3       Shell       413 ## 4       Cloud       548 p$drop(1:2)  p$organisms # Updated organisms !! ## DataFrame with 5 rows and 8 columns ##          org          id      strain      year     country        host ##     <factor> <character> <character> <integer> <character> <character> ## 3 17059_2_16         AR1      99/801      1999   Argentina      Bovine ## 4 17059_2_23         AR8      04/875      2004   Argentina      Bovine ## 5 17059_2_27        AR12      06/195      2006   Argentina      Bovine ## 6 17150_1_73         CA1   001A-0374      2005      Canada       Human ## 7 17059_2_42         TW6        1830      2008      Taiwan       Human ##        source   accession ##   <character> <character> ## 3     Prepuce   ERS739235 ## 4       Fetus   ERS739242 ## 5          VM   ERS739246 ## 6       Blood   ERS686652 ## 7       Blood   ERS739261 p$summary_stats # Updated stats !! ## DataFrame with 4 rows and 2 columns ##      Category    Number ##   <character> <integer> ## 1       Total      2504 ## 2        Core      1648 ## 3       Shell       309 ## 4       Cloud       547"},{"path":"https://iferres.github.io/pagoo/articles/Subseting.html","id":"recovering-dropped-organisms","dir":"Articles","previous_headings":"Dropping and Recovering Organisms","what":"Recovering dropped organisms","title":"Subseting","text":"can recover dropped organisms. see hidden organism, use $dropped field, recover using index name. Now french isolates features available.","code":"p$dropped ##            1            2  ##  \"16244_6_6\" \"16244_6_18\" p$recover( p$dropped ) p$organisms ## DataFrame with 7 rows and 8 columns ##          org          id      strain      year     country        host ##     <factor> <character> <character> <integer> <character> <character> ## 1 16244_6_6         FR15   2008/170h      2008      France       Human ## 2 16244_6_18        FR27   2012/185h      2012      France       Human ## 3 17059_2_16         AR1      99/801      1999   Argentina      Bovine ## 4 17059_2_23         AR8      04/875      2004   Argentina      Bovine ## 5 17059_2_27        AR12      06/195      2006   Argentina      Bovine ## 6 17150_1_73         CA1   001A-0374      2005      Canada       Human ## 7 17059_2_42         TW6        1830      2008      Taiwan       Human ##        source   accession ##   <character> <character> ## 1       Feces   ERS672247 ## 2       Blood   ERS672259 ## 3     Prepuce   ERS739235 ## 4       Fetus   ERS739242 ## 5          VM   ERS739246 ## 6       Blood   ERS686652 ## 7       Blood   ERS739261"},{"path":"https://iferres.github.io/pagoo/articles/pagoo.html","id":"basic-fields","dir":"Articles","previous_headings":"","what":"Basic Fields","title":"Quick Start","text":"3 variables 3 separate tables can queried: (Tip: see fields methods, R console type campy$ press [TAB] key two times.) dataset consist 7 Campylobacter spp genomes. organism, row associated metadata. first column, org, indicates organism. $clusters field returns table metadata associated group orthologous, case Pfam architecture domain (second column). last, important field $genes, returns list DataFrame information given individual gene, grouped cluster. let user inspect field /. first 3 columns (cluster, org, gene) glue interconnects 3 “variables”. Another useful field $pan_matrix, returns matrix gene abundance cluster (columns), organism (rows).","code":"campy$organisms ## DataFrame with 7 rows and 8 columns ##          org          id      strain      year     country        host ##     <factor> <character> <character> <integer> <character> <character> ## 1 16244_6_6         FR15   2008/170h      2008      France       Human ## 2 16244_6_18        FR27   2012/185h      2012      France       Human ## 3 17059_2_16         AR1      99/801      1999   Argentina      Bovine ## 4 17059_2_23         AR8      04/875      2004   Argentina      Bovine ## 5 17059_2_27        AR12      06/195      2006   Argentina      Bovine ## 6 17150_1_73         CA1   001A-0374      2005      Canada       Human ## 7 17059_2_42         TW6        1830      2008      Taiwan       Human ##        source   accession ##   <character> <character> ## 1       Feces   ERS672247 ## 2       Blood   ERS672259 ## 3     Prepuce   ERS739235 ## 4       Fetus   ERS739242 ## 5          VM   ERS739246 ## 6       Blood   ERS686652 ## 7       Blood   ERS739261 campy$clusters ## DataFrame with 2588 rows and 2 columns ##        cluster              Pfam_Arch ##       <factor>            <character> ## 1    group0001           2-Hacid_dh_C ## 2    group0002 2-Hacid_dh_C;2-Hacid.. ## 3    group0003 2-Hacid_dh_C;ACT;2-H.. ## 4    group0004        2Fe-2S_thioredx ## 5    group0005    4HB_MCP_1;MCPsignal ## ...        ...                    ... ## 2584 group2584              zf-RING_7 ## 2585 group2585               zf-TFIIB ## 2586 group2586                   ZinT ## 2587 group2587                   ZnuA ## 2588 group2588               ZT_dimer campy$genes"},{"path":"https://iferres.github.io/pagoo/articles/pagoo.html","id":"basic-methods","dir":"Articles","previous_headings":"","what":"Basic Methods","title":"Quick Start","text":"pagoo objects contain basic methods analyze pangenome, general statistics basic plotting capabilities. methods can also take arguments. example: :","code":"campy$dist(method = \"bray\") ##             16244_6_6 16244_6_18 17059_2_16 17059_2_23 17059_2_27 17150_1_73 ## 16244_6_18 0.06594656                                                        ## 17059_2_16 0.12122816 0.12500000                                             ## 17059_2_23 0.09622745 0.09632517 0.07632399                                  ## 17059_2_27 0.09245937 0.11310008 0.10311629 0.08230990                       ## 17150_1_73 0.08203991 0.09034444 0.13624408 0.12275937 0.12999735            ## 17059_2_42 0.08920705 0.09927089 0.14532148 0.12682137 0.13706919 0.09518600 campy$gg_barplot()"},{"path":"https://iferres.github.io/pagoo/articles/pagoo.html","id":"sequence-manipulation","dir":"Articles","previous_headings":"","what":"Sequence Manipulation","title":"Quick Start","text":"One main advantages using pagoo ability easily manipulate sequences. Sequences stored List DNAStringSet Biostrings package.","code":"campy$sequences ## DNAStringSetList of length 2588 ## [[\"group0001\"]] 16244_6_6__16244_6_6_00150=ATGGCGATAACAGTTTATTACGACAAAGATTGCG... ## [[\"group0002\"]] 16244_6_6__16244_6_6_01290=ATGAAAATAGTATGCTTAGATGCCGACACGCTTG... ## [[\"group0003\"]] 16244_6_6__16244_6_6_01710=ATGAAAACAGTTATAGTTTGCGATGCAATACATC... ## [[\"group0004\"]] 16244_6_6__16244_6_6_01754=ATGAAATTCGAATTTACTCATGAGCAATTATCGG... ## [[\"group0005\"]] 16244_6_6__16244_6_6_00049=ATGTCAAATTTAACTACTAACTTAACTACCAAAA... ## [[\"group0006\"]] 16244_6_6__16244_6_6_01069=ATGAATTATTTTGAGAATTTAAAAGTTTCAACAA... ## [[\"group0007\"]] 16244_6_6__16244_6_6_01612=ATGCGAATTAGAATTTATTATGAAGATACCGATG... ## [[\"group0008\"]] 16244_6_6__16244_6_6_01679=ATGATGAAAGATATGGGCGAGCCACGTATAAAAA... ## [[\"group0009\"]] 16244_6_18__16244_6_18_01216=ATGGGGCTTACTACGAGTACGACAAAGTATAT... ## [[\"group0010\"]] 16244_6_6__16244_6_6_00758=ATGAAAAGAGTGGTTATAAAAGTAGGCTCTCACG... ## ... ## <2578 more elements>"},{"path":"https://iferres.github.io/pagoo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ignacio Ferres. Author, maintainer. Gregorio Iraola. Author. Institut Pasteur de Montevideo. Funder.","code":""},{"path":"https://iferres.github.io/pagoo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ignacio Ferrés & Gregorio Iraola. object-oriented framework evolutionary pangenome analysis. Cell Reports Methods, Volume 1, Issue 5, 2021, 100085, ISSN 2667-2375. doi: 10.1016/j.crmeth.2021.100085.","code":"@Article{,   author = {Ignacio Ferrés and Gregorio Iraola},   title = {An object-oriented framework for evolutionary pangenome analysis},   journal = {Cell Reports Methods},   year = {2021},   volume = {1},   issue = {5},   issn = {2667-2375},   doi = {10.1016/j.crmeth.2021.100085},   url = {https://www.cell.com/cell-reports-methods/fulltext/S2667-2375(21)00140-5}, }"},{"path":"https://iferres.github.io/pagoo/index.html","id":"pagoo-an-encapsulated-oo-class-system-for-analyzing-bacterial-pangenomes-in-r","dir":"","previous_headings":"","what":"Analyze Bacterial Pangenomes in R with Pagoo","title":"Analyze Bacterial Pangenomes in R with Pagoo","text":"“One object store , one object find , one object query ggplot2 visualize .” (Lord Sauron)","code":""},{"path":"https://iferres.github.io/pagoo/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Analyze Bacterial Pangenomes in R with Pagoo","text":"pagoo encapsulated, object-oriented class system analyzing bacterial pangenomes. uses R6 package backend. designed order facilitate speed-comparative analysis multiple bacterial genomes, standardizing optimizing routine tasks performed everyday. handful things done everyday working bacterial pangenomes: subset, summarize, extract, visualize store data. , pagoo intended facilitate tasks much possible.","code":""},{"path":"https://iferres.github.io/pagoo/index.html","id":"philosophy","dir":"","previous_headings":"Introduction","what":"Philosophy","title":"Analyze Bacterial Pangenomes in R with Pagoo","text":"main idea behind pagoo , reconstructed pangenome, information basic methods embedded single object. query object, simply use $ symbol named list R.  idea common object-oriented programming languages, R final users. exploited R6 package take advantage kind programming make available R pangenomics community. pagoo composed three R6 classes, one complex , basic inherited complex ones. basic one, PgR6, contains basic subset methods data manipulation functions. second one, PgR6M inherits methods fields previous one, incorporates statistical visualization methods. last one, PgR6MS, inherits PgR6M capabilities, adds methods manipulate DNA sequences. quick look pagoo object print can give us clues composed: can see basically public private fields/methods. private, raw data stored. easy access . Instead, able access public functions active bindings. Active bindings functions behave variables, case querying private information returning user convenient way. Public methods “see” active bindings, results depends state pangenome object. instance, organisms can hidden dataset, thresholds can set actively, changing results retrieved public methods.","code":"<PgR6MS>   Inherits from: <PgR6M>   Public:     add_metadata: function (map = \"org\", data)      cg_exp_decay_fit: function (raref, pcounts = 10, ...)      clone: function (deep = FALSE)      cloud_clusters: active binding     cloud_genes: active binding     cloud_sequences: active binding     clusters: active binding     core_clusters: active binding     core_genes: active binding     core_level: active binding     core_seqs_4_phylo: function (max_per_org = 1, fill = TRUE)      core_sequences: active binding     dist: function (method = \"bray\", binary = FALSE, diag = FALSE, upper = FALSE,      drop: function (x)      dropped: active binding     genes: active binding     gg_barplot: function ()      gg_binmap: function ()      gg_curves: function (what = c(\"pangenome\", \"coregenome\"), ...)      gg_dist: function (method = \"bray\", ...)      gg_pca: function (colour = NULL, ...)      gg_pie: function ()      initialize: function (data, org_meta, cluster_meta, core_level = 95, sep = \"__\",      organisms: active binding     pan_matrix: active binding     pan_pca: function (center = TRUE, scale. = FALSE, ...)      pg_power_law_fit: function (raref, ...)      random_seed: active binding     rarefact: function (what = \"pangenome\", n.perm = 10)      recover: function (x)      runShinyApp: function ()      save_pangenomeRDS: function (file = \"pangenome.rds\", seqs.if.avail = TRUE)      sequences: active binding     shell_clusters: active binding     shell_genes: active binding     shell_sequences: active binding     summary_stats: active binding     write_pangenome: function (dir = \"pangenome\", force = FALSE)    Private:     .clusters: DataFrame     .data: DataFrame     .dropped: NULL     .level: 95     .organisms: DataFrame     .panmatrix: 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1  ...     .sep: __     .sequences: DNAStringSet     version: package_version, numeric_version"},{"path":"https://iferres.github.io/pagoo/index.html","id":"pangenome-reconstruction","dir":"","previous_headings":"Introduction","what":"Pangenome reconstruction","title":"Analyze Bacterial Pangenomes in R with Pagoo","text":"Pagoo works pangenome built pangenome reconstruction software. , can software preference. Despite recommend Pewit, pangenome reconstruction software, pagoo can read-output popular pangenome reconstruction software, roary, also planning give support others like Panaroo, PanX PIRATE. pagoo also runs Shiny application provides reactive interaction data facilitates handling visualization.","code":""},{"path":"https://iferres.github.io/pagoo/index.html","id":"installation","dir":"","previous_headings":"Introduction","what":"Installation","title":"Analyze Bacterial Pangenomes in R with Pagoo","text":"pagoo available CRAN: Alternatively can install latest dev version GitHub using devtools:","code":"install.packages(\"pagoo\") if (!require(\"devtools\")) install.packages(\"devtools\") devtools::install_github('iferres/pagoo')"},{"path":"https://iferres.github.io/pagoo/index.html","id":"help","dir":"","previous_headings":"Introduction","what":"Help","title":"Analyze Bacterial Pangenomes in R with Pagoo","text":"three classes documented. can access R help pages function: R6 classes documentation still standardized, recommend use pagoo::pagoo() function read documentation , use also instead raw classes.","code":"library(pagoo) ?PgR6 help('PgR6MS') ?pagoo"},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":null,"dir":"Reference","previous_headings":"","what":"PgR6 basic class — PgR6","title":"PgR6 basic class — PgR6","text":"basic PgR6 class constructor. contains basic fields subset functions handle pangenome. Final users use pagoo instead , since easy understand.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"PgR6 basic class — PgR6","text":"pan_matrix panmatrix. Rows organisms, columns groups orthologous. Cells indicates presence (>=1) absence (0) given gene, given organism. Cells can values greater 1 contain -paralogs. organisms DataFrame available organism names, organism number identifier rownames(). (Dropped organisms displayed field, see $dropped ). Additional metadata shown provided, additional columns. genes SplitDataFrameList object one entry per cluster. element contains DataFrame gene ids (<gid>) additional metadata, provided. gid created pasteing organism gene names, duplication gene names avoided. clusters DataFrame groups orthologous (clusters). Additional metadata shown additional columns, provided . row corresponds cluster. core_level percentage organisms gene must considered part coregenome. core_level = 95 default. set 100, 85 raises warning. core_genes Like genes, showing core genes. core_clusters Like $clusters, showing core clusters. cloud_genes Like genes, showing cloud genes. defined clusters contain single gene (singletons), plus one organisms probably clonal due identical general gene content. Colloquially defined strain-specific genes. cloud_clusters Like $clusters, showing cloud clusters defined . shell_genes Like genes, showing shell genes. defined clusters belong neither core genome, cloud genome. Colloquially defined genes present strains, strain-specific. shell_clusters Like $clusters, showing shell clusters, defined . summary_stats DataFrame information number core, shell, cloud clusters, well total number clusters. random_seed last .Random.seed. Used reproducibility purposes . dropped character vector dropped organism names, organism number identifier names()","code":""},{"path":[]},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PgR6 basic class — PgR6","text":"PgR6$new() PgR6$add_metadata() PgR6$drop() PgR6$recover() PgR6$write_pangenome() PgR6$save_pangenomeRDS() PgR6$clone()","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"PgR6 basic class — PgR6","text":"basic PgR6 class constructor. contains basic fields subset functions handle pangenome.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 basic class — PgR6","text":"","code":"PgR6$new(   data,   org_meta,   cluster_meta,   core_level = 95,   sep = \"__\",   verbose = TRUE,   DF,   group_meta )"},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 basic class — PgR6","text":"data data.frame DataFrame containing least following columns: gene (gene name), org (organism name gene belongs ), cluster (group orthologous gene belongs ). columns can added metadata gene. org_meta (optional) data.frame DataFrame containing additional metadata organisms. data.frame must column named \"org\" valid organisms names (, match provided data, column org), additional columns used metadata. row correspond organism. cluster_meta (optional) data.frame DataFrame containing additional metadata clusters. data.frame must column named \"cluster\" valid organisms names (, match provided data, column cluster), additional columns used metadata. row correspond cluster. core_level initial core_level (percentage organisms core cluster must considered part core genome). Must number 100 85, (default: 95). can change later using $core_level field object created. sep separator. default '__'(two underscores). used create unique gid (gene identifier) gene. gids created pasting org gene, separated sep. verbose logical. Whether display progress messages loading class. DF Deprecated. Use data instead. group_meta Deprecated. Use cluster_meta instead.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 basic class — PgR6","text":"R6 object class PgR6. contains basic fields methods analyzing pangenome.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"method-add-metadata-","dir":"Reference","previous_headings":"","what":"Method add_metadata()","title":"PgR6 basic class — PgR6","text":"Add metadata object. can add metadata organism, group orthologous (cluster), gene. Elements missing data filled NA (dimensions provided data.frame must coherent object data).","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 basic class — PgR6","text":"","code":"PgR6$add_metadata(map = \"org\", data)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 basic class — PgR6","text":"map character identifying metadata map. Can one \"org\", \"cluster\", \"gid\". data data.frame DataFrame metadata add. case, column named \"map\" must exists, contain identifiers element. case adding gene (gid) metadata,gene referenced name organism name gene provided \"data\" data.frame, separated  \"sep\" argument.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 basic class — PgR6","text":"self invisibly, additional metadata.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"method-drop-","dir":"Reference","previous_headings":"","what":"Method drop()","title":"PgR6 basic class — PgR6","text":"Drop organism dataset. method allows hide organism real dataset, ignoring downstream analyses. fields methods behave exist. instance, decide drop organism 1, $pan_matrix field (see ) show called.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 basic class — PgR6","text":"","code":"PgR6$drop(x)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 basic class — PgR6","text":"x character numeric. name organism wanted dropped, numeric id returned $organism field (see ).","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 basic class — PgR6","text":"self invisibly, x dropped. necessary assign function call new object, re-write R6 objects mutable.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"method-recover-","dir":"Reference","previous_headings":"","what":"Method recover()","title":"PgR6 basic class — PgR6","text":"Recover previously $drop()ped organism (see ). fields methods start behave considering organism .","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 basic class — PgR6","text":"","code":"PgR6$recover(x)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 basic class — PgR6","text":"x character numeric. name organism wanted recover, numeric id returned $dropped field (see ).","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 basic class — PgR6","text":"self invisibly, x recovered. necessary assign function call new object, re-write R6 objects mutable.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"method-write-pangenome-","dir":"Reference","previous_headings":"","what":"Method write_pangenome()","title":"PgR6 basic class — PgR6","text":"Write pangenome data flat tables (text). recommended way save pangenome, since can loose information numeric precision, column classes (factor, numeric, integer), state object (.e. dropped organisms, core_level), loosing reproducibility. Use $save_pangenomeRDS precise way saving pagoo object. Still, useful want work data outside R, just keep mind.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 basic class — PgR6","text":"","code":"PgR6$write_pangenome(dir = \"pangenome\", force = FALSE)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 basic class — PgR6","text":"dir non-existing directory name put data files. Default \"pangenome\". force logical. Whether overwrite directory already exists. Default: FALSE.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 basic class — PgR6","text":"directory least 3 files. \"data.tsv\" contain basic pangenome data provided data argument initialization method ($new(...)). \"clusters.tsv\" contain metadata associated clusters. \"organisms.tsv\" contain metadata associated organisms. latter 2 files contain single column metadata provided.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"method-save-pangenomerds-","dir":"Reference","previous_headings":"","what":"Method save_pangenomeRDS()","title":"PgR6 basic class — PgR6","text":"Save pagoo pangenome object. function provides method saving pagoo object state \"RDS\" file. load pangenome, use load_pangenomeRDS function package. ** compatible pagoo versions, update pagoo still recover pangenome. Even sep core_level restored unless user provides arguments load_pangenomeRDS. dropped organisms also kept hidden, working original object.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 basic class — PgR6","text":"","code":"PgR6$save_pangenomeRDS(file = \"pangenome.rds\")"},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 basic class — PgR6","text":"file name file save. Default: \"pangenome.rds\".","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 basic class — PgR6","text":"Writes list information needed restore object using load_pangenomeRDS function, RDS (binary) file.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PgR6 basic class — PgR6","text":"objects class cloneable method.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 basic class — PgR6","text":"","code":"PgR6$clone(deep = FALSE)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 basic class — PgR6","text":"deep Whether make deep clone.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":null,"dir":"Reference","previous_headings":"","what":"PgR6 class with methods. — PgR6M","title":"PgR6 class with methods. — PgR6M","text":"PgR6 Methods. Final users use pagoo instead , since easy understand. Inherits: PgR6","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"PgR6 class with methods. — PgR6M","text":"pagoo::PgR6 -> PgR6M","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"PgR6 class with methods. — PgR6M","text":"pagoo::PgR6$add_metadata() pagoo::PgR6$drop() pagoo::PgR6$recover() pagoo::PgR6$save_pangenomeRDS() pagoo::PgR6$write_pangenome()","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PgR6 class with methods. — PgR6M","text":"PgR6M$new() PgR6M$rarefact() PgR6M$dist() PgR6M$pan_pca() PgR6M$pg_power_law_fit() PgR6M$cg_exp_decay_fit() PgR6M$gg_barplot() PgR6M$gg_binmap() PgR6M$gg_dist() PgR6M$gg_pca() PgR6M$gg_pie() PgR6M$gg_curves() PgR6M$runShinyApp() PgR6M$clone()","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"PgR6 class with methods. — PgR6M","text":"Create PgR6M object.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$new(   data,   org_meta,   cluster_meta,   core_level = 95,   sep = \"__\",   verbose = TRUE,   DF,   group_meta )"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with methods. — PgR6M","text":"data data.frame DataFrame containing least following columns: gene (gene name), org (organism name gene belongs ), cluster (group orthologous gene belongs ). columns can added metadata gene. org_meta (optional) data.frame DataFrame containing additional metadata organisms. data.frame must column named \"org\" valid organisms names (, match provided data, column org), additional columns used metadata. row correspond organism. cluster_meta (optional) data.frame DataFrame containing additional metadata clusters. data.frame must column named \"cluster\" valid organisms names (, match provided data, column cluster), additional columns used metadata. row correspond cluster. core_level initial core_level (percentage organisms core cluster must considered part core genome). Must number 100 85, (default: 95). can change later using $core_level field object created. sep separator. default '__'(two underscores). used create unique gid (gene identifier) gene. gids created pasting org gene, separated sep. verbose logical. Whether display progress messages loading class. DF Deprecated. Use data instead. group_meta Deprecated. Use cluster_meta instead.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with methods. — PgR6M","text":"R6 object class PgR6M. contains basic fields methods analyzing pangenome. also contains additional statistical methods analyze , methods make basic exploratory plots.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-rarefact-","dir":"Reference","previous_headings":"","what":"Method rarefact()","title":"PgR6 class with methods. — PgR6M","text":"Rarefact pangenome corgenome. Compute number genes belong pangenome coregenome, number random permutations increasingly bigger sample genomes.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$rarefact(what = \"pangenome\", n.perm = 10)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with methods. — PgR6M","text":"One \"pangenome\" \"coregenome\". n.perm number permutations compute (default: 10).","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with methods. — PgR6M","text":"matrix, rows number genomes added, columns permutations, cell number number genes category.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-dist-","dir":"Reference","previous_headings":"","what":"Method dist()","title":"PgR6 class with methods. — PgR6M","text":"Compute distance pairs genomes. default dist method \"bray\" (Bray-Curtis distance). Another used distance method \"jaccard\", set binary = FALSE (see ) obtain meaningful result. See vegdist details, just wrapper function.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$dist(   method = \"bray\",   binary = FALSE,   diag = FALSE,   upper = FALSE,   na.rm = FALSE,   ... )"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with methods. — PgR6M","text":"method distance method use. See vegdist available methods, details one. binary Transform abundance matrix presence/absence matrix computing distance. diag Compute diagonals. upper Return upper diagonal. na.rm Pairwise deletion missing observations computing dissimilarities. ... parameters. See vegdist details.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with methods. — PgR6M","text":"dist object containing pairwise dissimilarities genomes.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-pan-pca-","dir":"Reference","previous_headings":"","what":"Method pan_pca()","title":"PgR6 class with methods. — PgR6M","text":"Performs principal components analysis panmatrix","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$pan_pca(center = TRUE, scale. = FALSE, ...)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with methods. — PgR6M","text":"center logical value indicating whether variables shifted zero centered. Alternately, vector length equal number columns x can supplied. value passed scale. scale. logical value indicating whether variables scaled unit variance analysis takes place. default TRUE. ... arguments. See prcomp","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with methods. — PgR6M","text":"Returns list class \"prcomp\". See prcomp information.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-pg-power-law-fit-","dir":"Reference","previous_headings":"","what":"Method pg_power_law_fit()","title":"PgR6 class with methods. — PgR6M","text":"Fits power law curve pangenome rarefaction simulation.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$pg_power_law_fit(raref, ...)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with methods. — PgR6M","text":"raref (Optional) rarefaction matrix, returned rarefact(). ... arguments passed rarefact(). raref missing, computed default arguments, ones provided .","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with methods. — PgR6M","text":"list two elements: $formula fitted function, $params fitted parameters. attribute \"alpha\" also returned (alpha>1, pangenome closed, otherwise open.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-cg-exp-decay-fit-","dir":"Reference","previous_headings":"","what":"Method cg_exp_decay_fit()","title":"PgR6 class with methods. — PgR6M","text":"Fits exponential decay curve coregenome rarefaction simulation.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$cg_exp_decay_fit(raref, pcounts = 10, ...)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with methods. — PgR6M","text":"raref (Optional) rarefaction matrix, returned rarefact(). pcounts integer pseudo-counts. used better fit function small numbers, linearization method requires subtract constant C, coregenome size, y. y becomes closer coregenome size, operation tends 0, logarithm goes crazy. default pcounts=10. ... arguments passed rarefact(). raref missing, computed default arguments, ones provided .","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with methods. — PgR6M","text":"list two elements: $formula fitted function, $params fitted intercept decay parameters.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-gg-barplot-","dir":"Reference","previous_headings":"","what":"Method gg_barplot()","title":"PgR6 class with methods. — PgR6M","text":"Plot barplot frequency genes within total number genomes.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$gg_barplot()"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with methods. — PgR6M","text":"barplot, gg object (ggplot2 package) invisibly.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-gg-binmap-","dir":"Reference","previous_headings":"","what":"Method gg_binmap()","title":"PgR6 class with methods. — PgR6M","text":"Plot pangenome binary map representing presence/absence gene within organism.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$gg_binmap()"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with methods. — PgR6M","text":"binary map (ggplot2::geom_raster()), gg object (ggplot2 package) invisibly.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-gg-dist-","dir":"Reference","previous_headings":"","what":"Method gg_dist()","title":"PgR6 class with methods. — PgR6M","text":"Plot heatmap showing computed distance pairs organisms.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$gg_dist(method = \"bray\", ...)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with methods. — PgR6M","text":"method Distance method. One \"Jaccard\" (default), \"Manhattan\", see . ... arguments passed distManhattan.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with methods. — PgR6M","text":"heatmap (ggplot2::geom_tile()), gg object (ggplot2 package) invisibly.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-gg-pca-","dir":"Reference","previous_headings":"","what":"Method gg_pca()","title":"PgR6 class with methods. — PgR6M","text":"Plot scatter plot Principal Components Analysis.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$gg_pca(colour = NULL, ...)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with methods. — PgR6M","text":"colour name column $organisms field points take colour (provided). NULL (default) renders black points. ... arguments passed ggplot2::autoplot().","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with methods. — PgR6M","text":"scatter plot (ggplot2::autoplot()), gg object (ggplot2 package) invisibly.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-gg-pie-","dir":"Reference","previous_headings":"","what":"Method gg_pie()","title":"PgR6 class with methods. — PgR6M","text":"Plot pie chart showing number clusters pangenome category: core, shell, cloud.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$gg_pie()"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with methods. — PgR6M","text":"pie chart (ggplot2::geom_bar() + coord_polar()), gg object (ggplot2 package) invisibly.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-gg-curves-","dir":"Reference","previous_headings":"","what":"Method gg_curves()","title":"PgR6 class with methods. — PgR6M","text":"Plot pangenome /coregenome curves fitted functions returned pg_power_law_fit()  cg_exp_decay_fit(). can add points adding + geom_points(), ggplot2 package","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$gg_curves(what = c(\"pangenome\", \"coregenome\"), ...)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with methods. — PgR6M","text":"One \"pangenome\" \"coregenome\". ... ????","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with methods. — PgR6M","text":"scatter plot, gg object (ggplot2 package) invisibly.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-runshinyapp-","dir":"Reference","previous_headings":"","what":"Method runShinyApp()","title":"PgR6 class with methods. — PgR6M","text":"Launch interactive shiny app. contains sidebar controls switches interact pagoo object. can drop/recover organisms dataset, modify core_level, visualize statistics, plots, browse cluster gene information. main body, contains 2 tabs switch summary statistics plots core genome information one side, accessory genome plots information . lower part tab contains two tables, side side. \"Summary\" tab, left one contain information core clusters, one cluster per row. one selected (click), one right updated show information genes (provided), one gene per row. \"Accessory\" tab, similar configuration shown, case accessory clusters/genes displayed. slider sidebar one can select accessory frequency range display. Give try! Take account big pangenomes can slow performance app. 50-70 organisms often leads delay update plots/tables.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$runShinyApp()"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PgR6 class with methods. — PgR6M","text":"objects class cloneable method.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with methods. — PgR6M","text":"","code":"PgR6M$clone(deep = FALSE)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6M.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with methods. — PgR6M","text":"deep Whether make deep clone.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":null,"dir":"Reference","previous_headings":"","what":"PgR6 class with Methods and Sequences. — PgR6MS","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"PgR6 Methods Sequences. Final users use pagoo instead , since easy understand.  Inherits: PgR6M","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"pagoo::PgR6 -> pagoo::PgR6M -> PgR6MS","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"sequences DNAStringSetList set sequences grouped cluster. group accessible list. Biostrings methods available. core_sequences Like $sequences, showing core sequences. cloud_sequences Like $sequences, showing cloud sequences defined . shell_sequences Like $sequences, showing shell sequences, defined .","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"pagoo::PgR6$add_metadata() pagoo::PgR6$drop() pagoo::PgR6$recover() pagoo::PgR6$save_pangenomeRDS() pagoo::PgR6$write_pangenome() pagoo::PgR6M$cg_exp_decay_fit() pagoo::PgR6M$dist() pagoo::PgR6M$gg_barplot() pagoo::PgR6M$gg_binmap() pagoo::PgR6M$gg_curves() pagoo::PgR6M$gg_dist() pagoo::PgR6M$gg_pca() pagoo::PgR6M$gg_pie() pagoo::PgR6M$pan_pca() pagoo::PgR6M$pg_power_law_fit() pagoo::PgR6M$rarefact() pagoo::PgR6M$runShinyApp()","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"PgR6MS$new() PgR6MS$core_seqs_4_phylo() PgR6MS$clone()","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"Create PgR6MS object.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"","code":"PgR6MS$new(   data,   org_meta,   cluster_meta,   core_level = 95,   sep = \"__\",   DF,   group_meta,   sequences,   verbose = TRUE )"},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"data data.frame DataFrame containing least following columns: gene (gene name), org (organism name gene belongs ), cluster (group orthologous gene belongs ). columns can added metadata gene. org_meta (optional) data.frame DataFrame containing additional metadata organisms. data.frame must column named \"org\" valid organisms names (, match provided data, column org), additional columns used metadata. row correspond organism. cluster_meta (optional) data.frame DataFrame containing additional metadata clusters. data.frame must column named \"cluster\" valid organisms names (, match provided data, column cluster), additional columns used metadata. row correspond cluster. core_level initial core_level (percentage organisms core cluster must considered part core genome). Must number 100 85, (default: 95). can change later using $core_level field object created. sep separator. default '__'(two underscores). used create unique gid (gene identifier) gene. gids created pasting org gene, separated sep. DF Deprecated. Use data instead. group_meta Deprecated. Use cluster_meta instead. sequences Can accept: 1) named list named character vector. Name list names organisms, names character vector gene names; 2) named list DNAStringSetList objects (requirements (1), BStringSet names gene names); 3) DNAStringSetList (requirements (2) DNAStringSetList names organisms names). verbose logical. Whether display progress messages loading class.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"R6 object class PgR6MS. contains basic fields methods analyzing pangenome. also contains additional statistical methods analyze , methods make basic exploratory plots, methods sequence manipulation.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"method-core-seqs-phylo-","dir":"Reference","previous_headings":"","what":"Method core_seqs_4_phylo()","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"field obtaining core gene sequences available (see ), creating phylogeny sets useful : 1) possibility extracting just one sequence organism cluster, case paralogues present, 2) filling gaps empty sequences case core_level set 100%, allowing genes (100% organisms) incorporated phylogeny. purpose special function.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"","code":"PgR6MS$core_seqs_4_phylo(max_per_org = 1, fill = TRUE)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"max_per_org Maximum number sequences organism taken cluster. fill logical. fill DNAStringSet empty DNAString cases core_level set 100%, clusters missing organisms also considered.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"DNAStringSetList core genes. Order organisms cluster conserved, easier concatenate super-gene suitable phylogenetic inference.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"objects class cloneable method.","code":""},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"","code":"PgR6MS$clone(deep = FALSE)"},{"path":"https://iferres.github.io/pagoo/reference/PgR6MS.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"PgR6 class with Methods and Sequences. — PgR6MS","text":"deep Whether make deep clone.","code":""},{"path":"https://iferres.github.io/pagoo/reference/load_pangenomeRDS.html","id":null,"dir":"Reference","previous_headings":"","what":"Load A Pagoo Pangenome — load_pangenomeRDS","title":"Load A Pagoo Pangenome — load_pangenomeRDS","text":"function loads pagoo pangenome `.RDS` file generated `save_pangenomeRDS` method. Objects loaded functions keep states, .e : dropped/recovered organisms conserved, well `core_level` setted object originally saved.","code":""},{"path":"https://iferres.github.io/pagoo/reference/load_pangenomeRDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load A Pagoo Pangenome — load_pangenomeRDS","text":"","code":"load_pangenomeRDS(file, pkg, ...)"},{"path":"https://iferres.github.io/pagoo/reference/load_pangenomeRDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load A Pagoo Pangenome — load_pangenomeRDS","text":"file path pangenome `.RDS` file. pkg package use load object. necessary provide, may useful cases. ... Arguments passed pagoo object. sep core_level overwrite values stored file.","code":""},{"path":"https://iferres.github.io/pagoo/reference/load_pangenomeRDS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load A Pagoo Pangenome — load_pangenomeRDS","text":"PgR6MS class object, PgR6M object (without sequences, respectively).","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Pagoo Object — pagoo","title":"Create a Pagoo Object — pagoo","text":"main function load pagoo object. safer friendly using pagoo's class constructors (PgR6, PgR6M, PgR6MS). function returns either PgR6M class object, PgR6MS class object, depending parameters provided. sequences provided, returns latter. See details.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Pagoo Object — pagoo","text":"","code":"pagoo(   data,   org_meta,   cluster_meta,   sequences,   core_level = 95,   sep = \"__\",   verbose = TRUE )"},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Pagoo Object — pagoo","text":"data data.frame DataFrame containing least following columns: gene (gene name), org (organism name gene belongs ), cluster (group orthologous gene belongs ). columns can added metadata gene. org_meta (optional) data.frame DataFrame containing additional metadata organisms. data.frame must column named \"org\" valid organisms names (, match provided data, column org), additional columns used metadata. row correspond organism. cluster_meta (optional) data.frame DataFrame containing additional metadata clusters. data.frame must column named \"cluster\" valid organisms names (, match provided data, column cluster), additional columns used metadata. row correspond cluster. sequences (optional) Can accept: 1) named list named character vector. Name list names organisms, names character vector gene names; 2) named list DNAStringSetList objects (requirements (1), BStringSet names gene names); 3) DNAStringSetList (requirements (2) DNAStringSetList names organisms names). parameter used, PgR6MS class object returned. core_level initial core_level (percentage organisms core cluster must considered part core genome). Must number 100 85, (default: 95). can change later using $core_level field object created. sep separator. default '__'(two underscores). used create unique gid (gene identifier) gene. gids created pasting org gene, separated sep. verbose logical. Whether display progress messages loading class.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Pagoo Object — pagoo","text":"package uses [R6](https://r6.r-lib.org/articles/Introduction.html) classes provide unified, comprehensive, standardized, time flexible, way analyze pangenome. idea single object contains data basic methods analyze , well manipulate fields, explore, use harmony already existing extensive list R packages available created comparative genomics genetics. information, tutorials, resources, please visit https://iferres.github.io/pagoo/ .","code":""},{"path":[]},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active Bindings","title":"Create a Pagoo Object — pagoo","text":"$pan_matrix $organisms $clusters $genes $sequences $core_level $core_genes $core_clusters $core_sequences $shell_genes $shell_clusters $shell_sequences $cloud_genes $cloud_clusters $cloud_sequences","code":""},{"path":[]},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Create a Pagoo Object — pagoo","text":"Add metadata      Drop organism      Recover dropped organism      Write pangenome flat (text) files.      Save pangenome RDS (binary) file.      Clone pagoo object.      Compute distances      Compute Principal Component Analysis      Fit Power Law Function Pangenome      Fit Exponential Decay Function Coregenome      Compute Genomic Fluidity      Plot Accessory Frequency Plot     Plot Distance Heatmap      Plot Pangenome Binary Map     Plot PCA      Plot Pie Pangenome Categories     Plot Pangenome Curves      Run Shiny App     Retrieve Core Genes Phylogeny","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description-","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Add metadata object. can add metadata organism,                   group orthologous, gene. Elements missing data filled                   NA (dimensions provided data.frame must coherent object                   data).","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage-","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$add_metadata(map = 'org', df)","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments-","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"map: character identifying metadata map. Can                     one \"org\", \"group\", \"gid\". df: data.frame DataFrame metadata                     add. case, column named \"map\" must exists,                     contain identifiers element. case adding gene (gid)                     metadata,gene referenced name organism name                     gene provided \"data\" data.frame, separated                     \"sep\" argument.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return-","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"self invisibly, additional metadata.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--1","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Drop organism dataset. method allows hide organism                    real dataset, ignoring downstream analyses. fields                    methods behave exist. instance, decide drop                    organism 1, $pan_matrix field (see ) show                    called.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--1","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$drop(x)","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--1","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"x:  character numeric. name                     organism wanted dropped, numeric id returned                     $organism field (see ).","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--1","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"self invisibly, x dropped. necessary                     assign function call new object, re-write R6 objects                     mutable.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--2","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Recover previously $drop()ped organism (see ). fields                   methods start behave considering organism .","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--2","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$recover(x)","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--2","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"x: character numeric. name                     organism wanted recover, numeric id returned                     $dropped field (see ).","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--2","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"self invisibly, x recovered. necessary                     assign function call new object, re-write R6 objects                     mutable.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--3","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Write pangenome data flat tables (text). recommended way                   save pangenome, since can loose information numeric precision,                   column classes (factor, numeric, integer), state object                   (.e. dropped organisms, core_level), loosing reproducibility. Use                   save_pangenomeRDS precise way saving pagoo object.                   Still, useful want work data outside R, just keep                   mind.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--3","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$write_pangenome(dir = \"pangenome\", force = FALSE)","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--3","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"dir: unexisting directory name put data files. Default                     \"pangenome\". force: logical. Whether overwrite directory already                     exists. Default: FALSE.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--3","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"directory least 3 files. \"data.tsv\" contain basic                     pangenome data provided data argument                     initialization method ($new(...)). \"clusters.tsv\" contain metadata                     associated clusters. \"organisms.tsv\" contain metadata associated                     organisms. latter 2 files contain single column metadata                     provided.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--4","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Save pagoo pangenome object. function provides method saving pagoo                  object state \"RDS\" file. load pangenome, use                  load_pangenomeRDS function package. ** compatible                  pagoo versions, update pagoo still recover pangenome. Even                  sep core_level restored unless user provides                  arguments load_pangenomeRDS. dropped organisms also kept hidden,                  working original object.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--4","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$save_pangenomeRDS(file = \"pangenome.rds\")","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--4","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"file: name file save. Default: \"pangenome.rds\".","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--4","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"Writes list information needed restore object                     using load_pangenomeRDS function, RDS (binary) file.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--5","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"objects class clonable method.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--5","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$clone(deep = FALSE)","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--5","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"deep: character identifying metadata map. Can                     one \"org\", \"group\", \"gid\".","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--5","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"Whether make deep clone.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--6","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Compute distance pairs genomes. default dist method                   \"bray\" (Bray-Curtis distance). Another used distance method \"jaccard\",                   set binary = FALSE (see ) obtain meaningful result.                   See vegdist details, just wrapper function.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--6","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$dist(                   method = \"bray\",                   binary = FALSE,                   diag = FALSE,                   upper = FALSE,                   na.rm = FALSE,                   ...                   )","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--6","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"method: distance method use. See vegdist                     available methods, details one. binary: Transform abundance matrix presence/absence                     matrix computing distance. diag: Compute diagonals. upper: Return upper diagonal. na.rm: Pairwise deletion missing observations                     computing dissimilarities. ...: parameters. See vegdist details.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--6","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"dist object containing pairwise dissimilarities genomes.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--7","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Performs principal components analysis panmatrix.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--7","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$pan_pca( center = TRUE, scale. = FALSE, ...)","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--7","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"center: logical value indicating whether variables shifted                     zero centered. Alternately, vector length equal number columns x can                     supplied. value passed scale. scale.: logical value indicating whether variables scaled                     unit variance analysis takes place. default TRUE. ...: arguments. See prcomp","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--7","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"Returns list class \"prcomp\". See prcomp information.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--8","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Fits power law curve pangenome rarefaction simulation.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--8","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$pg_power_law_fit(raref, ...)","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--8","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"raref: (Optional) rarefaction matrix, returned rarefact(). ...: arguments passed rarefact(). raref                     missing, computed default arguments, ones provided .","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--8","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"list two elements: $formula fitted function, $params                     fitted parameters. attribute \"alpha\" also returned (                    alpha>1, pangenome closed, otherwise open.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--9","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Fits exponential decay curve coregenome rarefaction simulation.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--9","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$cg_exp_decay_fit(raref, pcounts = 10, ...)","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--9","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"raref: (Optional) rarefaction matrix, returned rarefact(). pcounts: integer pseudo-counts. used better fit function                     small numbers, linearization method requires subtract constant C,                     coregenome size, y. y becomes closer coregenome size, operation                     tends 0, logarithm goes crazy. default pcounts=10. ...: arguments passed rarefact(). raref                     missing, computed default arguments, ones provided .","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--9","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"list two elements: $formula fitted function, $params                     fitted intercept decay parameters.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--10","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Computes genomic fluidity, measure population                   diversity. See fluidity details.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--10","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$fluidity(nsim = 10)","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--10","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"nsim:integer specifying number random samples                      use computations.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--10","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"list two elements, mean fluidity sample standard                     deviation n.sim computed values.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--11","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Plot barplot frequency genes within total number                   genomes.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--11","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$gg_barplot()","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--11","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"barplot, gg object (ggplot2 package) invisibly.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--12","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Plot heatmap showing computed distance pairs organisms.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--12","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$gg_dist(method = \"bray\", ...)","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--11","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"method: Distance method. One \"Jaccard\" (default),                     \"Manhattan\",see . ...: arguments passed distManhattan","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--12","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"heatmap (ggplot2::geom_tile()), gg object (ggplot2                      package) invisibly.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--13","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Plot pangenome binary map representing presence/absence                   gene within organism.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--13","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$gg_binmap()","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--13","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"binary map (ggplot2::geom_raster()), gg object (ggplot2                     package) invisibly.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--14","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Plot scatter plot Principal Components Analysis.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--14","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$gg_pca(colour = NULL, ...))","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--12","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"colour:name column $organisms field                     points take color (provided). NULL (default) renders                     black points. ...: arguments passed ggplot2::autoplot().","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--14","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"scatter plot (ggplot2::autoplot()), gg object                     (ggplot2 package) invisibly.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--15","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Plot pie chart showing number clusters pangenome category: core,                   shell, cloud.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--15","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$gg_pie()","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--15","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"pie chart (ggplot2::geom_bar() + coord_polar()),                     gg object (ggplot2 package) invisibly.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--16","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Plot pangenome /coregenome curves fitted functions returned                   pg_power_law_fit() cg_exp_decay_fit(). can add points                   adding + geom_points(), ggplot2 package.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--16","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$gg_curves(= c(\"pangenome\", \"coregenome\", ...)","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--13","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":":  \"pangenome\" /\"coregenome\". ...: ignored","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--16","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"scatter plot, gg object (ggplot2 package) invisibly.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--17","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"Launch interactive shiny app. contains sidebar                   controls switches interact pagoo                   object. can drop/recover organisms dataset,                   modify core_level, visualize statistics, plots,                   browse cluster gene information. main body,                   contains 2 tabs switch summary statistics plots                   core genome information one side, accessory                   genome plots information . lower part tab contains two tables, side                   side. \"Summary\" tab, left one contain                   information core clusters, one cluster per row.                   one selected (click), one right                   updated show information genes (                  provided), one gene per row. \"Accessory\" tab,                   similar configuration shown, case                   accessory clusters/genes displayed. slider                   sidebar one can select accessory                   frequency range display. Give try! Take account big pangenomes can slow                   performance app. 50-70 organisms often                   leads delay update plots/tables.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--17","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$runShinyApp()","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--17","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"Opens shiny app browser.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"description--18","dir":"Reference","previous_headings":"","what":"Description:","title":"Create a Pagoo Object — pagoo","text":"field obtaining core gene sequences available (see ),                  creating phylogeny sets useful : 1)                  possibility extracting just one sequence organism                  cluster, case paralogues present, 2) filling gaps                  empty sequences case core_level set 100%, allowing                  genes (100% organisms) incorporated                  phylogeny. purpose special function.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"usage--18","dir":"Reference","previous_headings":"","what":"Usage:","title":"Create a Pagoo Object — pagoo","text":"$core_seqs_4_phylo(max_per_org = 1, fill = TRUE)","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"arguments--14","dir":"Reference","previous_headings":"","what":"Arguments:","title":"Create a Pagoo Object — pagoo","text":"max_per_org:  Maximum number sequences organism                     taken cluster. fill: logical. fill DNAStringSet                     empty DNAString cases core_level set 100%,                     clusters missing organisms also considered.","code":""},{"path":"https://iferres.github.io/pagoo/reference/pagoo.html","id":"return--18","dir":"Reference","previous_headings":"","what":"Return:","title":"Create a Pagoo Object — pagoo","text":"DNAStringSetList core genes. Order organisms cluster                    conserved, easier concatenate super-gene suitable                    phylogenetic inference.","code":""},{"path":"https://iferres.github.io/pagoo/reference/panaroo_2_pagoo.html","id":null,"dir":"Reference","previous_headings":"","what":"Read panaroos's output into a pagoo's R6 class object — panaroo_2_pagoo","title":"Read panaroos's output into a pagoo's R6 class object — panaroo_2_pagoo","text":"function handle conversion panaroo's output files pagoo R6 class object. takes \"gene_presence_absence.csv\" file (optionally recommended) gff input file paths, returns object class PgR6MS (PgR6M left empty gffs argument). Panaroo identifies genes unusual lengths tagging 'stop', 'length', 'refound' labels. current version, function discards genes.","code":""},{"path":"https://iferres.github.io/pagoo/reference/panaroo_2_pagoo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read panaroos's output into a pagoo's R6 class object — panaroo_2_pagoo","text":"","code":"panaroo_2_pagoo(gene_presence_absence_csv, gffs, sep = \"__\")"},{"path":"https://iferres.github.io/pagoo/reference/panaroo_2_pagoo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read panaroos's output into a pagoo's R6 class object — panaroo_2_pagoo","text":"gene_presence_absence_csv character, path \"gene_presence_absence.csv\" file. (confuse file name .Rtab extension). gffs character vector paths original gff files used roary's input. Typically return value list.files() function. parameter optional highly recommended want manipulate sequences. sep character. Default: \"__\" (two underscores). See PgR6MS detail argument description.","code":""},{"path":"https://iferres.github.io/pagoo/reference/panaroo_2_pagoo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read panaroos's output into a pagoo's R6 class object — panaroo_2_pagoo","text":"pagoo's R6 class object. Either PgR6M, gffs argument left empty, PgR6MS path gff files provided.","code":""},{"path":"https://iferres.github.io/pagoo/reference/panaroo_2_pagoo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read panaroos's output into a pagoo's R6 class object — panaroo_2_pagoo","text":"Tonkin-Hill, G., MacAlasdair, N., Ruis, C. et al. Producing polished prokaryotic pangenomes Panaroo pipeline. Genome Biol 21, 180 (2020). https://doi.org/10.1186/s13059-020-02090-4","code":""},{"path":"https://iferres.github.io/pagoo/reference/panaroo_2_pagoo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read panaroos's output into a pagoo's R6 class object — panaroo_2_pagoo","text":"","code":"if (FALSE) { gffs <- list.files(path = \"path/to/gffs/\",                    pattern = \"[.]gff$\",                    full.names = TRUE) gpa_csv <- \"path/to/gene_presence_absence.csv\"  library(pagoo) pg <- panaroo_2_pagoo(gene_presence_absence_csv = gpa_csv,                     gffs = gffs) }"},{"path":"https://iferres.github.io/pagoo/reference/roary_2_pagoo.html","id":null,"dir":"Reference","previous_headings":"","what":"Read roary's output into a pagoo's R6 class object — roary_2_pagoo","title":"Read roary's output into a pagoo's R6 class object — roary_2_pagoo","text":"function handle conversion roary's output files pagoo R6 class object. takes \"gene_presence_absence.csv\" file (optionally recommended) gff input file paths, returns object class PgR6MS (PgR6M left empty gffs argument).","code":""},{"path":"https://iferres.github.io/pagoo/reference/roary_2_pagoo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read roary's output into a pagoo's R6 class object — roary_2_pagoo","text":"","code":"roary_2_pagoo(gene_presence_absence_csv, gffs, sep = \"__\", paralog_sep = \"\\t\")"},{"path":"https://iferres.github.io/pagoo/reference/roary_2_pagoo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read roary's output into a pagoo's R6 class object — roary_2_pagoo","text":"gene_presence_absence_csv character, path \"gene_presence_absence.csv\" file. (confuse file name .Rtab extension). gffs character vector paths original gff files used roary's input. Typically return value list.files() function. parameter optional highly recommended want manipulate sequences. sep character. Default: \"__\" (two underscores). See PgR6MS detail argument description. paralog_sep character. gene separator cases clusters -paralogs. (Default: \"\\t\" - tab).","code":""},{"path":"https://iferres.github.io/pagoo/reference/roary_2_pagoo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read roary's output into a pagoo's R6 class object — roary_2_pagoo","text":"pagoo's R6 class object. Either PgR6M, gffs argument left empty, PgR6MS path gff files provided.","code":""},{"path":"https://iferres.github.io/pagoo/reference/roary_2_pagoo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read roary's output into a pagoo's R6 class object — roary_2_pagoo","text":"Andrew J. Page, Carla . Cummins, Martin Hunt, Vanessa K. Wong, Sandra Reuter,  Matthew T. G. Holden, Maria Fookes, Daniel Falush, Jacqueline . Keane, Julian  Parkhill, \"Roary: Rapid large-scale prokaryote pan genome analysis\",  Bioinformatics, 2015;31(22):3691-3693","code":""},{"path":"https://iferres.github.io/pagoo/reference/roary_2_pagoo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read roary's output into a pagoo's R6 class object — roary_2_pagoo","text":"","code":"if (FALSE) { gffs <- list.files(path = \"path/to/gffs/\",                    pattern = \"[.]gff$\",                    full.names = TRUE) gpa_csv <- \"path/to/gene_presence_absence.csv\"  library(pagoo) pg <- roary_2_pagoo(gene_presence_absence_csv = gpa_csv,                     gffs = gffs) }"},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-0318","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.18","title":"pagoo 0.3.18","text":"Fixed #59: panaroo csv file looking incorrect column names. New github actions.","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-0317","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.17","title":"pagoo 0.3.17","text":"CRAN release: 2022-11-18 Fixed #57 (3): better handling csv column names.","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-0316","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.16","title":"pagoo 0.3.16","text":"Fixed #57: panaroo_2_pagoo issue. pattern matching bug.","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-0315","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.15","title":"pagoo 0.3.15","text":"Fixed #57: panaroo_2_pagoo issue.","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-0314","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.14","title":"pagoo 0.3.14","text":"Improved read_gff function reading gff3 files bakta.","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-0313","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.13","title":"pagoo 0.3.13","text":"CRAN release: 2022-08-31 Fixed issue reading panaroo’s output. New roxygen2 version","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-0312","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.12","title":"pagoo 0.3.12","text":"CRAN release: 2022-02-01 Fixed #55: “Cluster annotations match cluster names”. Error building pangenome object.","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-0311","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.11","title":"pagoo 0.3.11","text":"Fixed #53: panaroo seems writing empty clusters (.e. genes ), push fixes error associated . Added information publication readme. Updated R-CMD-check.yml latest version.","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-0310","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.10","title":"pagoo 0.3.10","text":"Fixed #51: Adding metadata missing key end data.frame failed. Now method $add_metadata() corrected.","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-039","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.9","title":"pagoo 0.3.9","text":"CRAN release: 2021-05-13 Added panaroo_2_pagoo function read output panaroo pangenome reconstruction software. Improved $add_metadata() method. Now columns name one already present overwritten instead duplicated (closes #44). Also, users can now provide metadata covering pangenome partially, .e, providing gene/clusters/organisms mapping column. entities without metadata provided filled NAs.","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-038","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.8","title":"pagoo 0.3.8","text":"CRAN release: 2021-02-12 Improve backward compatibility. Older pagoo objects created third party packages depend pagoo attribute required successfully load session. Now approach downgrade object base pagoo class, provide namespace using pkg argument.","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-037","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.7","title":"pagoo 0.3.7","text":"Fixed missing link documentation. Smaller toy dataset comply CRAN policies.","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-036","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.6","title":"pagoo 0.3.6","text":"Bugfix, adds compatibility previous save/load_pangenomeRDS methods","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-035","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.5","title":"pagoo 0.3.5","text":"Faster roary_2_pagoo() Improved save_pangenomeRDS() load_pangenomeRDS() methods Several bugfixes.","code":""},{"path":"https://iferres.github.io/pagoo/news/index.html","id":"pagoo-0339000","dir":"Changelog","previous_headings":"","what":"pagoo 0.3.3.9000","title":"pagoo 0.3.3.9000","text":"Added NEWS.md file track changes package.","code":""}]
