% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PgR6.R
\name{PgR6}
\alias{PgR6}
\title{PgR6 basic class}
\description{
A basic \code{PgR6} class constructor. It contains basic fields
and subset functions to handle a pangenome.
}
\section{Class Constructor}{

\describe{
    \item{\code{new(DF, org_meta, group_meta, sep = "__")}}{
        \itemize{
            \item{Create a \code{PgR6} object.}
            \item{\bold{Args:}}{
                \itemize{
                    \item{\bold{\code{DF}}: A \code{data.frame} or \code{\link[S4Vectors:DataFrame-class]{DataFrame}} containing at least the
                    following columns: \code{gene} (gene name), \code{org} (organism name to which the gene belongs to),
                    and \code{group} (group of orthologous to which the gene belongs to). More columns can be added as metadata
                    for each gene.
                 }
                    \item{\bold{\code{org_meta}}: (optional) A \code{data.frame} or \code{\link[S4Vectors:DataFrame-class]{DataFrame}}
                    containging additional metadata for organisms. This \code{data.frame} must have a column named "org" with
                    valid organisms names (that is, they should match with those provided in \code{DF}, column \code{org}), and
                    additional columns will be used as metadata. Each row should correspond to each organism.

                 }
                    \item{\bold{\code{group_meta}}: (optional) A \code{data.frame} or \code{\link[S4Vectors:DataFrame-class]{DataFrame}}
                    containging additional metadata for clusters. This \code{data.frame} must have a column named "group" with
                    valid organisms names (that is, they should match with those provided in \code{DF}, column \code{group}), and
                    additional columns will be used as metadata. Each row should correspond to each cluster.

                 }
                    \item{\bold{\code{sep}}: A separator. By default is '__'(two underscores). It will be used to
                    create a unique \code{gid} (gene identifier) for each gene. \code{gid}s are created by pasting
                    \code{org} to \code{gene}, separated by \code{sep}.
                 }
                    \item{\bold{\code{verbose}}: \code{logical}. Whether to display progress messages when loading class.

                  }
                }
            }
            \item{\bold{Returns:}}{
                \itemize{
                    \item{An R6 object of class PgR6. It contains basic fields and methods for
                    analyzing a pangenome.}
                }
            }
        }
    }
}
}

\section{Public Methods}{

\describe{
    \item{\code{add_metadata(map = 'org', df)}}{
        \itemize{
            \item{Add metadata to the object. You can add metadata to each organism, to each
            group of orthologous, or to each gene. Elements with missing data should be filled
            by \code{NA} (dimensions of the provided data.frame must be coherent with object
            data).}
            \item{\bold{Args:}}{
                \itemize{
                    \item{\bold{\code{map}}: \code{character} identifiying the metadata to map. Can
                    be one of \code{"org"}, \code{"group"}, or \code{"gid"}.}
                    \item{\bold{\code{df}}: \code{data.frame} or \code{DataFrame} with the metadata to
                    add. For ethier case, a column named as \code{"map"} must exists, which should
                    contain identifiers for each element. In the case of adding gene (\code{gid})
                    metadata,each gene should be referenced by the name of the organism and the name
                    of the gene as provided in the \code{"DF"} data.frame, separated by the
                    \code{"sep"} argument.}
                }
            }
            \item{\bold{Returns:}}{
                \itemize{
                    \item{\code{self} invisibly, but with additional metadata.}
                }
            }
        }
    }
    \item{\code{drop(x)}}{
        \itemize{
            \item{Drop an organism from the dataset. This method allows to hide an organism
            from the real dataset, ignoring it in downstream analyses. All the fields and
            methods will behave as it doesn't exist. For instance, if you decide to drop
            organism 1, the \code{$pan_matrix} field (see below) would not show it when
            called.}
            \item{\bold{Args:}}{
                \itemize{
                    \item{\bold{\code{x}}: \code{character} or \code{numeric}. The name of the
                    organism wanted to be dropped, or its numeric id as returned in
                    \code{$organism} field (see below).
                 }
                }
            }
            \item{\bold{Returns:}}{
                \itemize{
                    \item{\code{self} invisibly, but with \code{x} dropped. It isn't necessary
                    to assign the function call to a new object, nor to re-write it as R6 objects
                    are mutable.}
                }
            }
        }
    }
    \item{\code{recover(x)}}{
        \itemize{
            \item{Recover a previously \code{$drop()}ped organism (see above). All fields
            and methods will start to behave considering this organism again.}
            \item{\bold{Args:}}{
                \itemize{
                    \item{\bold{\code{x}}: \code{character} or \code{numeric}. The name of the
                    organism wanted to be recover, or its numeric id as returned in
                    \code{$dropped} field (see below).
                 }
                }
            }
            \item{\bold{Returns:}}{
                \itemize{
                    \item{\code{self} invisibly, but with \code{x} recovered. It isn't necessary
                    to assign the function call to a new object, nor to re-write it as R6 objects
                    are mutable.}
                }
            }
        }
    }
}
}

\section{Public Fields}{

\describe{
    \item{\bold{\code{$pan_matrix}}}{: The panmatrix. Rows are organisms, and
    columns are groups of orthologous. Cells indicates the presence (>=1) or
    absence (0) of a given gene, in a given organism. Cells can have values
    greater than 1 if contain in-paralogs.}
    \item{\bold{\code{$organisms}}}{: A \code{\link[S4Vectors:DataFrame-class]{DataFrame}} with available
    organism names, and organism number identifier as \code{rownames()}. (Dropped
    organisms will not be displayed in this field, see \code{$dropped} below).
    Additional metadata will be shown if provided, as additional columns.}
    \item{\bold{\code{$clusters}}}{: A \code{\link[S4Vectors:DataFrame-class]{DataFrame}} with the groups
    of orthologous (clusters). Additional metadata will be shown as additional columns,
    if provided before. Each row corresponds to each cluster.}
    \item{\bold{\code{$genes}}}{: A \code{\link[IRanges:DataFrameList-class]{SplitDataFrameList}} object with
    one entry per cluster. Each element contains a \code{\link[S4Vectors:DataFrame-class]{DataFrame}}
    with gene ids (\code{<gid>}) and additional metadata, if provided. \code{gid} are
    created by \code{paste}ing organism and gene names, so duplication in gene names
    are avoided.}
    \item{\bold{\code{$core_level}}}{: The percentage of organisms a gene must be in
    to be considered as part of the coregenome. \code{core_level = 95} by default.
    Can't be set above 100, and below 85 raises a warning.}
    \item{\bold{\code{$core_genes}}}{: Like \code{genes}, but only showing core genes.}
    \item{\bold{\code{$core_clusters}}}{: Like \code{$clusters}, but only showing core
    clusters.}
    \item{\bold{\code{$cloud_genes}}}{: Like \code{genes}, but only showing cloud genes.
    These are defined as those clusters which contain a single gene (singletons), plus
    those which have more than one but its organisms are probably clonal due to identical
    general gene content. Colloquially defined as strain-specific genes.}
    \item{\bold{\code{$cloud_clusters}}}{: Like \code{$clusters}, but only showing cloud
    clusters as defined above.}
    \item{\bold{\code{$shell_genes}}}{: Like \code{genes}, but only showing shell genes.
    These are defined as those clusters than don't belong nethier to the core genome,
    nor to cloud genome. Colloquially defined as genes that are present in some but not
    all strains, and that aren't strain-specific.}
    \item{\bold{\code{$shell_clusters}}}{: Like \code{$clusters}, but only showing shell
    clusters, as defined above.}
    \item{\bold{\code{$summary_stats}}}{: A \code{\link[S4Vectors:DataFrame-class]{DataFrame}} with
    information about the number of core, shell, and cloud clusters, as well as the
    total number of clusters.}
    \item{\bold{\code{$random_seed}}}{: The last \code{.Random.seed}. Used for
    reproducibility purposes only.}
    \item{\bold{\code{$dropped}}}{: A \code{character} vector with dropped organism
    names, and organism number identifier as \code{names()}}
}
}

\section{Special Methods}{

\describe{
    \item{\code{clone(deep = FALSE)}}{
        \itemize{
            \item{Method for copying an object. See \href{https://adv-r.hadley.nz/r6.html#r6-semantics}{emph{Advanced R}} for the intricacies of R6 reference semantics.}
            \item{\bold{Args:}}{
                \itemize{
                    \item{\bold{\code{deep}}: logical. Whether to recursively clone nested R6 objects.
                 }
                }
            }
            \item{\bold{Returns:}}{
                \itemize{
                    \item{Cloned object of this class.}
                }
            }
        }
    }
}
}

